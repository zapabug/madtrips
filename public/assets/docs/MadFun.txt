Here’s a complete solution to implement your billboard-style advertisement feature using Nostr posts with the NDK library, based on your requirements. I’ll walk you through the process step-by-step, ensuring it’s mobile-friendly, caches posts locally, and meets your navigation and profile-linking needs.
Overview of the Solution
We’re building a responsive slideshow that:

    Fetches the 100 most recent posts with images from Nostr, prioritizing the Olas relay (wss://relay.olas.app) for its Instagram-like focus on pictures.
    Starts by displaying the 25 oldest posts, sorted from oldest to newest.
    Caches up to 100 posts locally for performance.
    Auto-slides every 3 seconds, pauses on hover, and supports swipe gestures on mobile.
    Allows clicking a post to view the user’s profile via njump.me (desktop) or nostr: protocol (mobile, with fallback).
    Is flexible with content size and fully compatible with both desktop and mobile.

You mentioned hashtags like #funchal, #madeira, #travelmadeira, #madstr, and #espetada for filtering content, and I’ve included those. You can add more in the code later as needed.
Step-by-Step Implementation
1. Fetching Posts from Nostr
We’ll use the NDK library to fetch posts from Nostr relays, with wss://relay.olas.app as the primary relay since it’s optimized for images.

    Initial Fetch: Get the 100 most recent posts with images containing the specified hashtags.
    Real-Time Updates: Subscribe to new posts and add them to the cache if they have images.

Here’s the code to fetch posts:
tsx

import { NDK } from '@nostr-dev-kit/ndk';

// Initialize NDK with relays, prioritizing Olas
const ndk = new NDK({
  explicitRelayUrls: [
    'wss://relay.olas.app', // Best for pictures
    'wss://relay.damus.io',
    'wss://nostr-pub.wellorder.net',
  ],
});

// Define a type for posts
type FeedItem = {
  id: string;
  content: string;
  pubkey: string;
  createdAt: number;
  images: string[];
};

// Extract image URLs from post content
function extractImages(content: string): string[] {
  const imageRegex = /(https?:\/\/[^\s]+\.(jpg|jpeg|png|gif))/gi;
  return content.match(imageRegex) || [];
}

// Fetch the initial 100 posts with images
async function fetchInitialPosts(): Promise<FeedItem[]> {
  await ndk.connect();

  const hashtags = ['funchal', 'madeira', 'travelmadeira', 'madstr', 'espetada'];
  const events = await ndk.fetchEvents({
    kinds: [1], // Text notes
    '#t': hashtags, // Filter by hashtags
    limit: 100, // Fetch 100 posts
  });

  const posts = Array.from(events)
    .map(event => ({
      id: event.id,
      content: event.content,
      pubkey: event.pubkey,
      createdAt: event.created_at,
      images: extractImages(event.content),
    }))
    .filter(item => item.images.length > 0) // Only posts with images
    .sort((a, b) => a.createdAt - b.createdAt) // Oldest first
    .slice(0, 100); // Limit to 100

  return posts;
}

// Subscribe to real-time updates
function subscribeToNewPosts(onNewPost: (post: FeedItem) => void) {
  const subscription = ndk.subscribe(
    {
      kinds: [1],
      '#t': ['funchal', 'madeira', 'travelmadeira', 'madstr', 'espetada'],
    },
    { closeOnEose: false } // Keep subscription open
  );

  subscription.on('event', (event) => {
    const newPost = {
      id: event.id,
      content: event.content,
      pubkey: event.pubkey,
      createdAt: event.created_at,
      images: extractImages(event.content),
    };
    if (newPost.images.length > 0) {
      onNewPost(newPost); // Add to cache if it has images
    }
  });

  return () => subscription.stop();
}

You can add more hashtags to the hashtags array later as you remember them.
2. Caching Posts Locally
We’ll cache up to 100 posts locally and display the 25 oldest ones initially.

    Initial Cache: Store the fetched 100 posts.
    Real-Time Updates: Add new posts to the cache, keeping it at 100 by removing the oldest ones.
    Display: Show the 25 oldest posts in the slideshow.

Here’s how to manage the cache in a React component:
tsx

import { useState, useEffect } from 'react';

export default function BillboardSlideshow() {
  const [cachedPosts, setCachedPosts] = useState<FeedItem[]>([]);
  const [displayPosts, setDisplayPosts] = useState<FeedItem[]>([]);

  // Fetch initial posts
  useEffect(() => {
    fetchInitialPosts().then(posts => {
      setCachedPosts(posts);
      setDisplayPosts(posts.slice(0, 25)); // Show 25 oldest
    });
  }, []);

  // Subscribe to new posts
  useEffect(() => {
    const unsubscribe = subscribeToNewPosts(newPost => {
      setCachedPosts(prev => {
        const updated = [newPost, ...prev]
          .sort((a, b) => a.createdAt - b.createdAt) // Keep sorted
          .slice(0, 100); // Limit to 100
        setDisplayPosts(updated.slice(0, 25)); // Update display
        return updated;
      });
    });
    return unsubscribe;
  }, []);

  // The slideshow UI will go here (see next section)
}

3. Building the Slideshow
The slideshow will:

    Show one post at a time with its image and content.
    Auto-slide every 3 seconds, pausing when hovered.
    Support swipe gestures on mobile using react-swipeable.

Here’s the complete component:
tsx

import { useState, useEffect } from 'react';
import { useSwipeable } from 'react-swipeable';

export default function BillboardSlideshow() {
  const [cachedPosts, setCachedPosts] = useState<FeedItem[]>([]);
  const [displayPosts, setDisplayPosts] = useState<FeedItem[]>([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isPaused, setIsPaused] = useState(false);

  // Fetch initial posts
  useEffect(() => {
    fetchInitialPosts().then(posts => {
      setCachedPosts(posts);
      setDisplayPosts(posts.slice(0, 25));
    });
  }, []);

  // Subscribe to new posts
  useEffect(() => {
    const unsubscribe = subscribeToNewPosts(newPost => {
      setCachedPosts(prev => {
        const updated = [newPost, ...prev]
          .sort((a, b) => a.createdAt - b.createdAt)
          .slice(0, 100);
        setDisplayPosts(updated.slice(0, 25));
        return updated;
      });
    });
    return unsubscribe;
  }, []);

  // Auto-slide logic
  useEffect(() => {
    if (isPaused || displayPosts.length === 0) return;

    const interval = setInterval(() => {
      setCurrentIndex(prev => (prev + 1) % displayPosts.length);
    }, 3000); // Slide every 3 seconds

    return () => clearInterval(interval);
  }, [isPaused, displayPosts]);

  // Swipe handlers for mobile
  const handlers = useSwipeable({
    onSwipedLeft: () => setCurrentIndex(prev => (prev + 1) % displayPosts.length),
    onSwipedRight: () => setCurrentIndex(prev => (prev - 1 + displayPosts.length) % displayPosts.length),
  });

  if (displayPosts.length === 0) return <div>Loading...</div>;

  const currentPost = displayPosts[currentIndex];
  const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
  const profileLink = isMobile ? `nostr:${currentPost.pubkey}` : `https://njump.me/${currentPost.pubkey}`;

  return (
    <div
      {...handlers}
      className="relative w-full max-w-4xl h-96 mx-auto overflow-hidden rounded-lg shadow-lg"
      onMouseEnter={() => setIsPaused(true)}
      onMouseLeave={() => setIsPaused(false)}
    >
      <a
        href={profileLink}
        target="_blank"
        rel="noopener noreferrer"
        className="block w-full h-full"
      >
        <img
          src={currentPost.images[0]}
          alt="Billboard slide"
          className="w-full h-full object-cover"
        />
        <div className="absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 text-white p-4">
          <p className="text-lg truncate">{currentPost.content}</p>
        </div>
      </a>
    </div>
  );
}

4. Linking to User Profiles

    Desktop: Clicking a post opens the user’s profile on njump.me in a new tab.
    Mobile: Attempts to use the nostr: protocol to open the profile in a native Nostr client. If no client is installed, it falls back to njump.me (handled by the browser).

The code above detects the device type and sets the link accordingly. Since nostr: support varies, njump.me ensures compatibility.
5. Styling and Responsiveness
The slideshow is designed to be embedded and responsive:

    Container: Adjusts to the screen size with a max width of max-w-4xl (adjustable).
    Images: Use object-cover to fill the container cleanly.

You mentioned wanting images to "come out of the container a bit." Here’s an optional CSS tweak you can add:
css

.billboard-image {
  transform: scale(1.05); /* Slightly larger than container */
  transition: transform 0.3s ease;
}

.billboard-image:hover {
  transform: scale(1.1); /* Zoom on hover */
}

Update the <img> tag’s class to billboard-image to apply this effect.
Final Notes
This solution meets all your requirements:

    Fetches 100 posts initially, then updates in real-time using wss://relay.olas.app and other relays.
    Caches up to 100 posts locally, displaying the 25 oldest in the slideshow.
    Supports swipe navigation on mobile and auto-sliding with pause-on-hover.
    Links to user profiles with njump.me on desktop and nostr: on mobile.
    Is flexible with content size for embedding.

Feel free to tweak the hashtags, styling, or add more features as needed! Let me know if you have questions or want to refine anything further.
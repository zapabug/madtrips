"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/typescript-lru-cache";
exports.ids = ["vendor-chunks/typescript-lru-cache"];
exports.modules = {

/***/ "(ssr)/./node_modules/typescript-lru-cache/dist/LRUCache.js":
/*!************************************************************!*\
  !*** ./node_modules/typescript-lru-cache/dist/LRUCache.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.LRUCache = void 0;\r\nconst LRUCacheNode_1 = __webpack_require__(/*! ./LRUCacheNode */ \"(ssr)/./node_modules/typescript-lru-cache/dist/LRUCacheNode.js\");\r\n/**\r\n * A key value cache that implements the LRU policy.\r\n *\r\n * @typeparam TKey The type of the keys in the cache. Defaults to `string`.\r\n * @typeparam TValue The type of the values in the cache. Defaults to `any`.\r\n *\r\n * @see {@link https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)}\r\n */\r\nclass LRUCache {\r\n    /**\r\n     * Creates a new instance of the LRUCache.\r\n     *\r\n     * @param options Additional configuration options for the LRUCache.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * // No options.\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // With options.\r\n     * const cache = new LRUCache({\r\n     *  entryExpirationTimeInMS: 10000\r\n     * });\r\n     * ```\r\n     */\r\n    constructor(options) {\r\n        this.lookupTable = new Map();\r\n        this.head = null;\r\n        this.tail = null;\r\n        const { maxSize = 25, entryExpirationTimeInMS = null, onEntryEvicted, onEntryMarkedAsMostRecentlyUsed, cloneFn, clone } = options !== null && options !== void 0 ? options : {};\r\n        if (Number.isNaN(maxSize) || maxSize <= 0) {\r\n            throw new Error('maxSize must be greater than 0.');\r\n        }\r\n        if (typeof entryExpirationTimeInMS === 'number' &&\r\n            (entryExpirationTimeInMS <= 0 || Number.isNaN(entryExpirationTimeInMS))) {\r\n            throw new Error('entryExpirationTimeInMS must either be null (no expiry) or greater than 0');\r\n        }\r\n        this.maxSizeInternal = maxSize;\r\n        this.entryExpirationTimeInMS = entryExpirationTimeInMS;\r\n        this.onEntryEvicted = onEntryEvicted;\r\n        this.onEntryMarkedAsMostRecentlyUsed = onEntryMarkedAsMostRecentlyUsed;\r\n        this.clone = clone;\r\n        this.cloneFn = cloneFn;\r\n    }\r\n    /**\r\n     * Returns the number of entries in the LRUCache object.\r\n     * If the cache has entryExpirationTimeInMS set, expired entries will be removed before the size is returned.\r\n     *\r\n     * @returns The number of entries in the cache.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * const size = cache.size;\r\n     *\r\n     * // Will log 1\r\n     * console.log(size);\r\n     * ```\r\n     */\r\n    get size() {\r\n        this.cleanCache();\r\n        return this.lookupTable.size;\r\n    }\r\n    /**\r\n     * Returns the number of entries that can still be added to the LRUCache without evicting existing entries.\r\n     *\r\n     * @returns The number of entries that can still be added without evicting existing entries.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache({ maxSize: 10 });\r\n     *\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * const remainingSize = cache.remainingSize;\r\n     *\r\n     * // Will log 9 due to 9 spots remaining before reaching maxSize of 10.\r\n     * console.log(remainingSize);\r\n     * ```\r\n     */\r\n    get remainingSize() {\r\n        return this.maxSizeInternal - this.size;\r\n    }\r\n    /**\r\n     * Returns the most recently used (newest) entry in the cache.\r\n     * This will not mark the entry as recently used.\r\n     * If the newest node is expired, it will be removed.\r\n     *\r\n     * @returns The most recently used (newest) entry in the cache.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache({ maxSize: 10 });\r\n     *\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * const newest = cache.newest;\r\n     *\r\n     * // Will log testValue\r\n     * console.log(newest.value);\r\n     *\r\n     * // Will log testKey\r\n     * console.log(newest.key);\r\n     * ```\r\n     */\r\n    get newest() {\r\n        if (!this.head) {\r\n            return null;\r\n        }\r\n        if (this.head.isExpired) {\r\n            this.removeNodeFromListAndLookupTable(this.head);\r\n            return this.newest;\r\n        }\r\n        return this.mapNodeToEntry(this.head);\r\n    }\r\n    /**\r\n     * Returns the least recently used (oldest) entry in the cache.\r\n     * This will not mark the entry as recently used.\r\n     * If the oldest node is expired, it will be removed.\r\n     *\r\n     * @returns The least recently used (oldest) entry in the cache.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache({ maxSize: 10 });\r\n     *\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * const oldest = cache.oldest;\r\n     *\r\n     * // Will log testValue\r\n     * console.log(oldest.value);\r\n     *\r\n     * // Will log testKey\r\n     * console.log(oldest.key);\r\n     * ```\r\n     */\r\n    get oldest() {\r\n        if (!this.tail) {\r\n            return null;\r\n        }\r\n        if (this.tail.isExpired) {\r\n            this.removeNodeFromListAndLookupTable(this.tail);\r\n            return this.oldest;\r\n        }\r\n        return this.mapNodeToEntry(this.tail);\r\n    }\r\n    /**\r\n     * Gets or sets the maxSize of the cache.\r\n     * This will evict the least recently used entries if needed to reach new maxSize.\r\n     *\r\n     * @param value The new value for maxSize. Must be greater than 0.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache({ maxSize: 10 });\r\n     *\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * // Will be 10\r\n     * const maxSize = cache.maxSize;\r\n     *\r\n     * // Set new maxSize to 5. If there are more than 5 items in the cache, the least recently used entries will be removed until cache size is 5.\r\n     * cache.maxSize = 5;\r\n     * ```\r\n     */\r\n    get maxSize() {\r\n        return this.maxSizeInternal;\r\n    }\r\n    set maxSize(value) {\r\n        if (Number.isNaN(value) || value <= 0) {\r\n            throw new Error('maxSize must be greater than 0.');\r\n        }\r\n        this.maxSizeInternal = value;\r\n        this.enforceSizeLimit();\r\n    }\r\n    /**\r\n     * Sets the value for the key in the LRUCache object. Returns the LRUCache object.\r\n     * This marks the newly added entry as the most recently used entry.\r\n     * If adding the new entry makes the cache size go above maxSize,\r\n     * this will evict the least recently used entries until size is equal to maxSize.\r\n     *\r\n     * @param key The key of the entry.\r\n     * @param value The value to set for the key.\r\n     * @param entryOptions Additional configuration options for the cache entry.\r\n     *\r\n     * @returns The LRUCache instance.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * // Set the key key2 to value value2. Pass in optional options.\r\n     * cache.set('key2', 'value2', { entryExpirationTimeInMS: 10 });\r\n     * ```\r\n     */\r\n    set(key, value, entryOptions) {\r\n        const currentNodeForKey = this.lookupTable.get(key);\r\n        if (currentNodeForKey) {\r\n            this.removeNodeFromListAndLookupTable(currentNodeForKey);\r\n        }\r\n        const node = new LRUCacheNode_1.LRUCacheNode(key, value, {\r\n            entryExpirationTimeInMS: this.entryExpirationTimeInMS,\r\n            onEntryEvicted: this.onEntryEvicted,\r\n            onEntryMarkedAsMostRecentlyUsed: this.onEntryMarkedAsMostRecentlyUsed,\r\n            clone: this.clone,\r\n            cloneFn: this.cloneFn,\r\n            ...entryOptions\r\n        });\r\n        this.setNodeAsHead(node);\r\n        this.lookupTable.set(key, node);\r\n        this.enforceSizeLimit();\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns the value associated to the key, or null if there is none or if the entry is expired.\r\n     * If an entry is returned, this marks the returned entry as the most recently used entry.\r\n     *\r\n     * @param key The key of the entry to get.\r\n     *\r\n     * @returns The cached value or null.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * // Will be 'testValue'. Entry will now be most recently used.\r\n     * const item1 = cache.get('testKey');\r\n     *\r\n     * // Will be null\r\n     * const item2 = cache.get('keyNotInCache');\r\n     * ```\r\n     */\r\n    get(key) {\r\n        const node = this.lookupTable.get(key);\r\n        if (!node) {\r\n            return null;\r\n        }\r\n        if (node.isExpired) {\r\n            this.removeNodeFromListAndLookupTable(node);\r\n            return null;\r\n        }\r\n        this.setNodeAsHead(node);\r\n        return node.value;\r\n    }\r\n    /**\r\n     * Returns the value associated to the key, or null if there is none or if the entry is expired.\r\n     * If an entry is returned, this will not mark the entry as most recently accessed.\r\n     * Useful if a value is needed but the order of the cache should not be changed.\r\n     *\r\n     * @param key The key of the entry to get.\r\n     *\r\n     * @returns The cached value or null.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * // Will be 'testValue'\r\n     * const item1 = cache.peek('testKey');\r\n     *\r\n     * // Will be null\r\n     * const item2 = cache.peek('keyNotInCache');\r\n     * ```\r\n     */\r\n    peek(key) {\r\n        const node = this.lookupTable.get(key);\r\n        if (!node) {\r\n            return null;\r\n        }\r\n        if (node.isExpired) {\r\n            this.removeNodeFromListAndLookupTable(node);\r\n            return null;\r\n        }\r\n        return node.value;\r\n    }\r\n    /**\r\n     * Deletes the entry for the passed in key.\r\n     *\r\n     * @param key The key of the entry to delete\r\n     *\r\n     * @returns True if an element in the LRUCache object existed and has been removed,\r\n     * or false if the element does not exist.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * // Will be true\r\n     * const wasDeleted = cache.delete('testKey');\r\n     *\r\n     * // Will be false\r\n     * const wasDeleted2 = cache.delete('keyNotInCache');\r\n     * ```\r\n     */\r\n    delete(key) {\r\n        const node = this.lookupTable.get(key);\r\n        if (!node) {\r\n            return false;\r\n        }\r\n        return this.removeNodeFromListAndLookupTable(node);\r\n    }\r\n    /**\r\n     * Returns a boolean asserting whether a value has been associated to the key in the LRUCache object or not.\r\n     * This does not mark the entry as recently used.\r\n     * If the cache has a key but the entry is expired, it will be removed and false will be returned.\r\n     *\r\n     * @param key The key of the entry to check if exists\r\n     *\r\n     * @returns true if the cache contains the supplied key. False if not.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * // Will be true\r\n     * const wasDeleted = cache.has('testKey');\r\n     *\r\n     * // Will be false\r\n     * const wasDeleted2 = cache.has('keyNotInCache');\r\n     * ```\r\n     */\r\n    has(key) {\r\n        const node = this.lookupTable.get(key);\r\n        if (!node) {\r\n            return false;\r\n        }\r\n        if (node.isExpired) {\r\n            this.removeNodeFromListAndLookupTable(node);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Removes all entries in the cache.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * // Clear cache.\r\n     * cache.clear();\r\n     * ```\r\n     */\r\n    clear() {\r\n        this.head = null;\r\n        this.tail = null;\r\n        this.lookupTable.clear();\r\n    }\r\n    /**\r\n     * Searches the cache for an entry matching the passed in condition.\r\n     * Expired entries will be skipped (and removed).\r\n     * If multiply entries in the cache match the condition, the most recently used entry will be returned.\r\n     * If an entry is returned, this marks the returned entry as the most recently used entry.\r\n     *\r\n     * @param condition The condition to apply to each entry in the\r\n     *\r\n     * @returns The first cache entry to match the condition. Null if none match.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * // item will be { key: 'testKey', value: 'testValue }\r\n     * const item = cache.find(entry => {\r\n     *   const { key, value } = entry;\r\n     *\r\n     *   if (key === 'testKey' || value === 'something') {\r\n     *     return true;\r\n     *   }\r\n     *\r\n     *   return false;\r\n     * });\r\n     *\r\n     * // item2 will be null\r\n     * const item2 = cache.find(entry => entry.key === 'notInCache');\r\n     * ```\r\n     */\r\n    find(condition) {\r\n        let node = this.head;\r\n        while (node) {\r\n            if (node.isExpired) {\r\n                const next = node.next;\r\n                this.removeNodeFromListAndLookupTable(node);\r\n                node = next;\r\n                continue;\r\n            }\r\n            const entry = this.mapNodeToEntry(node);\r\n            if (condition(entry)) {\r\n                this.setNodeAsHead(node);\r\n                return entry;\r\n            }\r\n            node = node.next;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Iterates over and applies the callback function to each entry in the cache.\r\n     * Iterates in order from most recently accessed entry to least recently.\r\n     * Expired entries will be skipped (and removed).\r\n     * No entry will be marked as recently used.\r\n     *\r\n     * @param callback the callback function to apply to the entry\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * cache.forEach((key, value, index) => {\r\n     *   // do something with key, value, and/or index\r\n     * });\r\n     * ```\r\n     */\r\n    forEach(callback) {\r\n        let node = this.head;\r\n        let index = 0;\r\n        while (node) {\r\n            if (node.isExpired) {\r\n                const next = node.next;\r\n                this.removeNodeFromListAndLookupTable(node);\r\n                node = next;\r\n                continue;\r\n            }\r\n            callback(node.value, node.key, index);\r\n            node = node.next;\r\n            index++;\r\n        }\r\n    }\r\n    /**\r\n     * Creates a Generator which can be used with for ... of ... to iterate over the cache values.\r\n     * Iterates in order from most recently accessed entry to least recently.\r\n     * Expired entries will be skipped (and removed).\r\n     * No entry will be marked as accessed.\r\n     *\r\n     * @returns A Generator for the cache values.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * for (const value of cache.values()) {\r\n     *   // do something with the value\r\n     * }\r\n     * ```\r\n     */\r\n    *values() {\r\n        let node = this.head;\r\n        while (node) {\r\n            if (node.isExpired) {\r\n                const next = node.next;\r\n                this.removeNodeFromListAndLookupTable(node);\r\n                node = next;\r\n                continue;\r\n            }\r\n            yield node.value;\r\n            node = node.next;\r\n        }\r\n    }\r\n    /**\r\n     * Creates a Generator which can be used with for ... of ... to iterate over the cache keys.\r\n     * Iterates in order from most recently accessed entry to least recently.\r\n     * Expired entries will be skipped (and removed).\r\n     * No entry will be marked as accessed.\r\n     *\r\n     * @returns A Generator for the cache keys.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * for (const key of cache.keys()) {\r\n     *   // do something with the key\r\n     * }\r\n     * ```\r\n     */\r\n    *keys() {\r\n        let node = this.head;\r\n        while (node) {\r\n            if (node.isExpired) {\r\n                const next = node.next;\r\n                this.removeNodeFromListAndLookupTable(node);\r\n                node = next;\r\n                continue;\r\n            }\r\n            yield node.key;\r\n            node = node.next;\r\n        }\r\n    }\r\n    /**\r\n     * Creates a Generator which can be used with for ... of ... to iterate over the cache entries.\r\n     * Iterates in order from most recently accessed entry to least recently.\r\n     * Expired entries will be skipped (and removed).\r\n     * No entry will be marked as accessed.\r\n     *\r\n     * @returns A Generator for the cache entries.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * for (const entry of cache.entries()) {\r\n     *   const { key, value } = entry;\r\n     *   // do something with the entry\r\n     * }\r\n     * ```\r\n     */\r\n    *entries() {\r\n        let node = this.head;\r\n        while (node) {\r\n            if (node.isExpired) {\r\n                const next = node.next;\r\n                this.removeNodeFromListAndLookupTable(node);\r\n                node = next;\r\n                continue;\r\n            }\r\n            yield this.mapNodeToEntry(node);\r\n            node = node.next;\r\n        }\r\n    }\r\n    /**\r\n     * Creates a Generator which can be used with for ... of ... to iterate over the cache entries.\r\n     * Iterates in order from most recently accessed entry to least recently.\r\n     * Expired entries will be skipped (and removed).\r\n     * No entry will be marked as accessed.\r\n     *\r\n     * @returns A Generator for the cache entries.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * for (const entry of cache) {\r\n     *   const { key, value } = entry;\r\n     *   // do something with the entry\r\n     * }\r\n     * ```\r\n     */\r\n    *[Symbol.iterator]() {\r\n        let node = this.head;\r\n        while (node) {\r\n            if (node.isExpired) {\r\n                const next = node.next;\r\n                this.removeNodeFromListAndLookupTable(node);\r\n                node = next;\r\n                continue;\r\n            }\r\n            yield this.mapNodeToEntry(node);\r\n            node = node.next;\r\n        }\r\n    }\r\n    enforceSizeLimit() {\r\n        let node = this.tail;\r\n        while (node !== null && this.size > this.maxSizeInternal) {\r\n            const prev = node.prev;\r\n            this.removeNodeFromListAndLookupTable(node);\r\n            node = prev;\r\n        }\r\n    }\r\n    mapNodeToEntry({ key, value }) {\r\n        return {\r\n            key,\r\n            value\r\n        };\r\n    }\r\n    setNodeAsHead(node) {\r\n        this.removeNodeFromList(node);\r\n        if (!this.head) {\r\n            this.head = node;\r\n            this.tail = node;\r\n        }\r\n        else {\r\n            node.next = this.head;\r\n            this.head.prev = node;\r\n            this.head = node;\r\n        }\r\n        node.invokeOnEntryMarkedAsMostRecentlyUsed();\r\n    }\r\n    removeNodeFromList(node) {\r\n        if (node.prev !== null) {\r\n            node.prev.next = node.next;\r\n        }\r\n        if (node.next !== null) {\r\n            node.next.prev = node.prev;\r\n        }\r\n        if (this.head === node) {\r\n            this.head = node.next;\r\n        }\r\n        if (this.tail === node) {\r\n            this.tail = node.prev;\r\n        }\r\n        node.next = null;\r\n        node.prev = null;\r\n    }\r\n    removeNodeFromListAndLookupTable(node) {\r\n        node.invokeOnEvicted();\r\n        this.removeNodeFromList(node);\r\n        return this.lookupTable.delete(node.key);\r\n    }\r\n    cleanCache() {\r\n        // Don't spend time cleaning if entries don't expire.\r\n        if (!this.entryExpirationTimeInMS) {\r\n            return;\r\n        }\r\n        const expiredNodes = [];\r\n        for (const node of this.lookupTable.values()) {\r\n            if (node.isExpired) {\r\n                expiredNodes.push(node);\r\n            }\r\n        }\r\n        expiredNodes.forEach(node => this.removeNodeFromListAndLookupTable(node));\r\n    }\r\n}\r\nexports.LRUCache = LRUCache;\r\n//# sourceMappingURL=LRUCache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/typescript-lru-cache/dist/LRUCache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/typescript-lru-cache/dist/LRUCacheNode.js":
/*!****************************************************************!*\
  !*** ./node_modules/typescript-lru-cache/dist/LRUCacheNode.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.LRUCacheNode = void 0;\r\nclass LRUCacheNode {\r\n    constructor(key, value, options) {\r\n        const { entryExpirationTimeInMS = null, next = null, prev = null, onEntryEvicted, onEntryMarkedAsMostRecentlyUsed, clone, cloneFn } = options !== null && options !== void 0 ? options : {};\r\n        if (typeof entryExpirationTimeInMS === 'number' &&\r\n            (entryExpirationTimeInMS <= 0 || Number.isNaN(entryExpirationTimeInMS))) {\r\n            throw new Error('entryExpirationTimeInMS must either be null (no expiry) or greater than 0');\r\n        }\r\n        this.clone = clone !== null && clone !== void 0 ? clone : false;\r\n        this.cloneFn = cloneFn !== null && cloneFn !== void 0 ? cloneFn : this.defaultClone;\r\n        this.key = key;\r\n        this.internalValue = this.clone ? this.cloneFn(value) : value;\r\n        this.created = Date.now();\r\n        this.entryExpirationTimeInMS = entryExpirationTimeInMS;\r\n        this.next = next;\r\n        this.prev = prev;\r\n        this.onEntryEvicted = onEntryEvicted;\r\n        this.onEntryMarkedAsMostRecentlyUsed = onEntryMarkedAsMostRecentlyUsed;\r\n    }\r\n    get value() {\r\n        return this.clone ? this.cloneFn(this.internalValue) : this.internalValue;\r\n    }\r\n    get isExpired() {\r\n        return typeof this.entryExpirationTimeInMS === 'number' && Date.now() - this.created > this.entryExpirationTimeInMS;\r\n    }\r\n    invokeOnEvicted() {\r\n        if (this.onEntryEvicted) {\r\n            const { key, value, isExpired } = this;\r\n            this.onEntryEvicted({ key, value, isExpired });\r\n        }\r\n    }\r\n    invokeOnEntryMarkedAsMostRecentlyUsed() {\r\n        if (this.onEntryMarkedAsMostRecentlyUsed) {\r\n            const { key, value } = this;\r\n            this.onEntryMarkedAsMostRecentlyUsed({ key, value });\r\n        }\r\n    }\r\n    defaultClone(value) {\r\n        if (typeof value === 'boolean' || typeof value === 'string' || typeof value === 'number') {\r\n            return value;\r\n        }\r\n        return JSON.parse(JSON.stringify(value));\r\n    }\r\n}\r\nexports.LRUCacheNode = LRUCacheNode;\r\n//# sourceMappingURL=LRUCacheNode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHlwZXNjcmlwdC1scnUtY2FjaGUvZGlzdC9MUlVDYWNoZU5vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQSxnQkFBZ0IsNEhBQTRIO0FBQzVJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isd0JBQXdCO0FBQzVDLGtDQUFrQyx1QkFBdUI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsYUFBYTtBQUNqQyxtREFBbUQsWUFBWTtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi9ob21lL2xmZy9HaXQvTWFkdHJpcHMvbm9kZV9tb2R1bGVzL3R5cGVzY3JpcHQtbHJ1LWNhY2hlL2Rpc3QvTFJVQ2FjaGVOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuTFJVQ2FjaGVOb2RlID0gdm9pZCAwO1xyXG5jbGFzcyBMUlVDYWNoZU5vZGUge1xyXG4gICAgY29uc3RydWN0b3Ioa2V5LCB2YWx1ZSwgb3B0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IHsgZW50cnlFeHBpcmF0aW9uVGltZUluTVMgPSBudWxsLCBuZXh0ID0gbnVsbCwgcHJldiA9IG51bGwsIG9uRW50cnlFdmljdGVkLCBvbkVudHJ5TWFya2VkQXNNb3N0UmVjZW50bHlVc2VkLCBjbG9uZSwgY2xvbmVGbiB9ID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDoge307XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeUV4cGlyYXRpb25UaW1lSW5NUyA9PT0gJ251bWJlcicgJiZcclxuICAgICAgICAgICAgKGVudHJ5RXhwaXJhdGlvblRpbWVJbk1TIDw9IDAgfHwgTnVtYmVyLmlzTmFOKGVudHJ5RXhwaXJhdGlvblRpbWVJbk1TKSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdlbnRyeUV4cGlyYXRpb25UaW1lSW5NUyBtdXN0IGVpdGhlciBiZSBudWxsIChubyBleHBpcnkpIG9yIGdyZWF0ZXIgdGhhbiAwJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2xvbmUgPSBjbG9uZSAhPT0gbnVsbCAmJiBjbG9uZSAhPT0gdm9pZCAwID8gY2xvbmUgOiBmYWxzZTtcclxuICAgICAgICB0aGlzLmNsb25lRm4gPSBjbG9uZUZuICE9PSBudWxsICYmIGNsb25lRm4gIT09IHZvaWQgMCA/IGNsb25lRm4gOiB0aGlzLmRlZmF1bHRDbG9uZTtcclxuICAgICAgICB0aGlzLmtleSA9IGtleTtcclxuICAgICAgICB0aGlzLmludGVybmFsVmFsdWUgPSB0aGlzLmNsb25lID8gdGhpcy5jbG9uZUZuKHZhbHVlKSA6IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlZCA9IERhdGUubm93KCk7XHJcbiAgICAgICAgdGhpcy5lbnRyeUV4cGlyYXRpb25UaW1lSW5NUyA9IGVudHJ5RXhwaXJhdGlvblRpbWVJbk1TO1xyXG4gICAgICAgIHRoaXMubmV4dCA9IG5leHQ7XHJcbiAgICAgICAgdGhpcy5wcmV2ID0gcHJldjtcclxuICAgICAgICB0aGlzLm9uRW50cnlFdmljdGVkID0gb25FbnRyeUV2aWN0ZWQ7XHJcbiAgICAgICAgdGhpcy5vbkVudHJ5TWFya2VkQXNNb3N0UmVjZW50bHlVc2VkID0gb25FbnRyeU1hcmtlZEFzTW9zdFJlY2VudGx5VXNlZDtcclxuICAgIH1cclxuICAgIGdldCB2YWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSA/IHRoaXMuY2xvbmVGbih0aGlzLmludGVybmFsVmFsdWUpIDogdGhpcy5pbnRlcm5hbFZhbHVlO1xyXG4gICAgfVxyXG4gICAgZ2V0IGlzRXhwaXJlZCgpIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIHRoaXMuZW50cnlFeHBpcmF0aW9uVGltZUluTVMgPT09ICdudW1iZXInICYmIERhdGUubm93KCkgLSB0aGlzLmNyZWF0ZWQgPiB0aGlzLmVudHJ5RXhwaXJhdGlvblRpbWVJbk1TO1xyXG4gICAgfVxyXG4gICAgaW52b2tlT25FdmljdGVkKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm9uRW50cnlFdmljdGVkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsga2V5LCB2YWx1ZSwgaXNFeHBpcmVkIH0gPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLm9uRW50cnlFdmljdGVkKHsga2V5LCB2YWx1ZSwgaXNFeHBpcmVkIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGludm9rZU9uRW50cnlNYXJrZWRBc01vc3RSZWNlbnRseVVzZWQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub25FbnRyeU1hcmtlZEFzTW9zdFJlY2VudGx5VXNlZCkge1xyXG4gICAgICAgICAgICBjb25zdCB7IGtleSwgdmFsdWUgfSA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMub25FbnRyeU1hcmtlZEFzTW9zdFJlY2VudGx5VXNlZCh7IGtleSwgdmFsdWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZGVmYXVsdENsb25lKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5MUlVDYWNoZU5vZGUgPSBMUlVDYWNoZU5vZGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxSVUNhY2hlTm9kZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/typescript-lru-cache/dist/LRUCacheNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/typescript-lru-cache/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/typescript-lru-cache/dist/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n__exportStar(__webpack_require__(/*! ./LRUCache */ \"(ssr)/./node_modules/typescript-lru-cache/dist/LRUCache.js\"), exports);\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHlwZXNjcmlwdC1scnUtY2FjaGUvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsOEVBQVk7QUFDakMiLCJzb3VyY2VzIjpbIi9ob21lL2xmZy9HaXQvTWFkdHJpcHMvbm9kZV9tb2R1bGVzL3R5cGVzY3JpcHQtbHJ1LWNhY2hlL2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XHJcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xyXG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pKTtcclxudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0xSVUNhY2hlXCIpLCBleHBvcnRzKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/typescript-lru-cache/dist/index.js\n");

/***/ })

};
;
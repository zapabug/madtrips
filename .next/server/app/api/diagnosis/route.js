/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/diagnosis/route";
exports.ids = ["app/api/diagnosis/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdiagnosis%2Froute&page=%2Fapi%2Fdiagnosis%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdiagnosis%2Froute.ts&appDir=%2Fhome%2Flfg%2FGit%2FMadtrips%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Flfg%2FGit%2FMadtrips&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdiagnosis%2Froute&page=%2Fapi%2Fdiagnosis%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdiagnosis%2Froute.ts&appDir=%2Fhome%2Flfg%2FGit%2FMadtrips%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Flfg%2FGit%2FMadtrips&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _home_lfg_Git_Madtrips_src_app_api_diagnosis_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/diagnosis/route.ts */ \"(rsc)/./src/app/api/diagnosis/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/diagnosis/route\",\n        pathname: \"/api/diagnosis\",\n        filename: \"route\",\n        bundlePath: \"app/api/diagnosis/route\"\n    },\n    resolvedPagePath: \"/home/lfg/Git/Madtrips/src/app/api/diagnosis/route.ts\",\n    nextConfigOutput,\n    userland: _home_lfg_Git_Madtrips_src_app_api_diagnosis_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZkaWFnbm9zaXMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmRpYWdub3NpcyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmRpYWdub3NpcyUyRnJvdXRlLnRzJmFwcERpcj0lMkZob21lJTJGbGZnJTJGR2l0JTJGTWFkdHJpcHMlMkZzcmMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRmhvbWUlMkZsZmclMkZHaXQlMkZNYWR0cmlwcyZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDdkM7QUFDcUI7QUFDSztBQUNsRjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL2hvbWUvbGZnL0dpdC9NYWR0cmlwcy9zcmMvYXBwL2FwaS9kaWFnbm9zaXMvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2RpYWdub3Npcy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2RpYWdub3Npc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvZGlhZ25vc2lzL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL2hvbWUvbGZnL0dpdC9NYWR0cmlwcy9zcmMvYXBwL2FwaS9kaWFnbm9zaXMvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICB3b3JrQXN5bmNTdG9yYWdlLFxuICAgICAgICB3b3JrVW5pdEFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdiagnosis%2Froute&page=%2Fapi%2Fdiagnosis%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdiagnosis%2Froute.ts&appDir=%2Fhome%2Flfg%2FGit%2FMadtrips%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Flfg%2FGit%2FMadtrips&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/diagnosis/route.ts":
/*!****************************************!*\
  !*** ./src/app/api/diagnosis/route.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lib_nostr_NostrSocialGraphFetcher__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/nostr/NostrSocialGraphFetcher */ \"(rsc)/./src/lib/nostr/NostrSocialGraphFetcher.ts\");\n\n\n\n\nasync function GET() {\n    try {\n        // Check if data files exist\n        const diagnosticResults = {\n            files: {\n                status: 'checking',\n                details: {}\n            },\n            data: {\n                status: 'checking',\n                details: {}\n            },\n            api: {\n                status: 'checking',\n                details: {}\n            }\n        };\n        // Check data files\n        const dataDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'data');\n        const socialGraphPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(dataDir, 'social-graph.json');\n        const knownPubkeysPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(dataDir, 'known-pubkeys.json');\n        // Check if directory exists\n        diagnosticResults.files.details.directoryExists = fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(dataDir);\n        // Check individual files\n        if (diagnosticResults.files.details.directoryExists) {\n            diagnosticResults.files.details.socialGraphExists = fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(socialGraphPath);\n            diagnosticResults.files.details.knownPubkeysExists = fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(knownPubkeysPath);\n            // Check file sizes\n            if (diagnosticResults.files.details.socialGraphExists) {\n                const stats = fs__WEBPACK_IMPORTED_MODULE_2___default().statSync(socialGraphPath);\n                diagnosticResults.files.details.socialGraphSize = stats.size;\n                diagnosticResults.files.details.socialGraphModified = stats.mtime;\n                // Read a sample of the file to check validity\n                try {\n                    const fileContent = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(socialGraphPath, 'utf-8');\n                    const data = JSON.parse(fileContent);\n                    diagnosticResults.files.details.socialGraphValid = true;\n                    diagnosticResults.files.details.nodesCount = data.nodes?.length || 0;\n                    diagnosticResults.files.details.linksCount = data.links?.length || 0;\n                } catch (e) {\n                    diagnosticResults.files.details.socialGraphValid = false;\n                    diagnosticResults.files.details.socialGraphError = e.message;\n                }\n            }\n            if (diagnosticResults.files.details.knownPubkeysExists) {\n                const stats = fs__WEBPACK_IMPORTED_MODULE_2___default().statSync(knownPubkeysPath);\n                diagnosticResults.files.details.knownPubkeysSize = stats.size;\n                diagnosticResults.files.details.knownPubkeysModified = stats.mtime;\n                // Read the file to check validity\n                try {\n                    const fileContent = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(knownPubkeysPath, 'utf-8');\n                    const data = JSON.parse(fileContent);\n                    diagnosticResults.files.details.knownPubkeysValid = true;\n                    diagnosticResults.files.details.pubkeysCount = Object.keys(data.npubs || {}).length;\n                } catch (e) {\n                    diagnosticResults.files.details.knownPubkeysValid = false;\n                    diagnosticResults.files.details.knownPubkeysError = e.message;\n                }\n            }\n        }\n        // Set overall file status\n        if (!diagnosticResults.files.details.directoryExists) {\n            diagnosticResults.files.status = 'error';\n            diagnosticResults.files.message = 'Data directory does not exist';\n        } else if (!diagnosticResults.files.details.socialGraphExists || !diagnosticResults.files.details.knownPubkeysExists) {\n            diagnosticResults.files.status = 'warning';\n            diagnosticResults.files.message = 'One or more data files missing';\n        } else if (!diagnosticResults.files.details.socialGraphValid || !diagnosticResults.files.details.knownPubkeysValid) {\n            diagnosticResults.files.status = 'error';\n            diagnosticResults.files.message = 'One or more data files are invalid';\n        } else {\n            diagnosticResults.files.status = 'success';\n            diagnosticResults.files.message = 'All data files exist and are valid';\n        }\n        // Check data from fetcher\n        try {\n            const graphData = await (0,_lib_nostr_NostrSocialGraphFetcher__WEBPACK_IMPORTED_MODULE_3__.getSocialGraphData)();\n            diagnosticResults.data.details.fetchSuccess = true;\n            diagnosticResults.data.details.hasNodes = Boolean(graphData.nodes && graphData.nodes.length > 0);\n            diagnosticResults.data.details.nodesCount = graphData.nodes?.length || 0;\n            diagnosticResults.data.details.hasLinks = Boolean(graphData.links && graphData.links.length > 0);\n            diagnosticResults.data.details.linksCount = graphData.links?.length || 0;\n            if (diagnosticResults.data.details.nodesCount > 0) {\n                diagnosticResults.data.details.sampleNodes = graphData.nodes.slice(0, 3);\n            }\n            // Check node types distribution\n            const nodeTypes = {};\n            if (graphData.nodes) {\n                graphData.nodes.forEach((node)=>{\n                    const type = node.type || 'unknown';\n                    nodeTypes[type] = (nodeTypes[type] || 0) + 1;\n                });\n                diagnosticResults.data.details.nodeTypeDistribution = nodeTypes;\n            }\n            // Set data status\n            if (!diagnosticResults.data.details.hasNodes) {\n                diagnosticResults.data.status = 'error';\n                diagnosticResults.data.message = 'No nodes found in social graph data';\n            } else if (!diagnosticResults.data.details.hasLinks) {\n                diagnosticResults.data.status = 'warning';\n                diagnosticResults.data.message = 'Nodes found but no links in social graph data';\n            } else {\n                diagnosticResults.data.status = 'success';\n                diagnosticResults.data.message = `Social graph has ${diagnosticResults.data.details.nodesCount} nodes and ${diagnosticResults.data.details.linksCount} links`;\n            }\n        } catch (e) {\n            diagnosticResults.data.status = 'error';\n            diagnosticResults.data.message = `Failed to fetch social graph data: ${e.message}`;\n            diagnosticResults.data.details.fetchSuccess = false;\n            diagnosticResults.data.details.error = e.message;\n        }\n        // Overall API status\n        if (diagnosticResults.files.status === 'error' || diagnosticResults.data.status === 'error') {\n            diagnosticResults.api.status = 'error';\n            diagnosticResults.api.message = 'Critical issues found with social graph data';\n        } else if (diagnosticResults.files.status === 'warning' || diagnosticResults.data.status === 'warning') {\n            diagnosticResults.api.status = 'warning';\n            diagnosticResults.api.message = 'Non-critical issues found with social graph data';\n        } else {\n            diagnosticResults.api.status = 'success';\n            diagnosticResults.api.message = 'Social graph data is healthy';\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: 'Diagnosis complete',\n            timestamp: Date.now(),\n            results: diagnosticResults,\n            recommendations: generateRecommendations(diagnosticResults)\n        });\n    } catch (error) {\n        console.error('Diagnosis error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: 'Diagnosis failed',\n            error: error.message,\n            timestamp: Date.now()\n        }, {\n            status: 500\n        });\n    }\n}\nfunction generateRecommendations(results) {\n    const recommendations = [];\n    if (results.files.status !== 'success') {\n        if (!results.files.details.directoryExists) {\n            recommendations.push('Create the data directory at the root of your project');\n        }\n        if (!results.files.details.socialGraphExists) {\n            recommendations.push('Initialize the social-graph.json file with a valid graph structure: {\"nodes\":[],\"links\":[]}');\n        }\n        if (!results.files.details.knownPubkeysExists) {\n            recommendations.push('Initialize the known-pubkeys.json file with a valid structure: {\"npubs\":{}}');\n        }\n        if (results.files.details.socialGraphExists && !results.files.details.socialGraphValid) {\n            recommendations.push('Fix the social-graph.json file - it contains invalid JSON');\n        }\n        if (results.files.details.knownPubkeysExists && !results.files.details.knownPubkeysValid) {\n            recommendations.push('Fix the known-pubkeys.json file - it contains invalid JSON');\n        }\n    }\n    if (results.data.status !== 'success') {\n        if (!results.data.details.fetchSuccess) {\n            recommendations.push('Check the getSocialGraphData function for errors');\n        } else if (!results.data.details.hasNodes) {\n            recommendations.push('The social graph has no nodes. Try updating it with known npubs');\n            recommendations.push('Use the admin UI or API to add initial npubs');\n        } else if (!results.data.details.hasLinks) {\n            recommendations.push('The social graph has nodes but no links. This suggests incomplete data');\n            recommendations.push('Try updating more npubs or checking the link generation logic');\n        }\n    }\n    // Check file sizes\n    if (results.files.details.socialGraphSize && results.files.details.socialGraphSize < 100) {\n        recommendations.push('The social-graph.json file is suspiciously small. It may be empty or initialized incorrectly');\n    }\n    // Add general recommendations\n    recommendations.push('Visit the admin page at /admin/socialgraph to manage the social graph');\n    recommendations.push('If visualization issues persist, check the browser console for client-side errors');\n    return recommendations;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/diagnosis/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/nostr/NostrSocialGraphFetcher.ts":
/*!**************************************************!*\
  !*** ./src/lib/nostr/NostrSocialGraphFetcher.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addKnownNpub: () => (/* binding */ addKnownNpub),\n/* harmony export */   forceSocialGraphUpdate: () => (/* binding */ forceSocialGraphUpdate),\n/* harmony export */   getKnownNpubsData: () => (/* binding */ getKnownNpubsData),\n/* harmony export */   getRawSocialGraphData: () => (/* binding */ getRawSocialGraphData),\n/* harmony export */   getSocialGraphData: () => (/* binding */ getSocialGraphData),\n/* harmony export */   setupScheduledUpdate: () => (/* binding */ setupScheduledUpdate)\n/* harmony export */ });\n/* harmony import */ var nostr_tools__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! nostr-tools */ \"(rsc)/./node_modules/nostr-tools/lib/esm/index.js\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config */ \"(rsc)/./src/lib/nostr/config.ts\");\n\n\n\n\n// Helper function to convert npub to hex pubkey\nfunction npubToHex(npub) {\n    if (!npub || !npub.startsWith('npub1')) return null;\n    try {\n        const result = nostr_tools__WEBPACK_IMPORTED_MODULE_3__.nip19.decode(npub);\n        return result.type === 'npub' ? result.data : null;\n    } catch (error) {\n        console.error('Failed to decode npub:', error);\n        return null;\n    }\n}\n// Helper function to convert hex pubkey to npub\nfunction hexToNpub(hex) {\n    if (!hex) return null;\n    try {\n        return nostr_tools__WEBPACK_IMPORTED_MODULE_3__.nip19.npubEncode(hex);\n    } catch (error) {\n        console.error('Failed to encode hex to npub:', error);\n        return null;\n    }\n}\n// Helper to ensure our data directories exist\nasync function ensureDataDirectories() {\n    try {\n        await (0,fs_promises__WEBPACK_IMPORTED_MODULE_0__.mkdir)(path__WEBPACK_IMPORTED_MODULE_1___default().dirname(_config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.socialGraphFile), {\n            recursive: true\n        });\n    } catch (err) {\n        console.error('Error creating data directory:', err);\n    }\n    try {\n        await (0,fs_promises__WEBPACK_IMPORTED_MODULE_0__.readFile)(_config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.socialGraphFile);\n    } catch (error) {\n        // Initialize empty social graph file\n        const initialData = {\n            lastUpdated: Date.now(),\n            members: {}\n        };\n        await (0,fs_promises__WEBPACK_IMPORTED_MODULE_0__.writeFile)(_config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.socialGraphFile, JSON.stringify(initialData, null, 2));\n    }\n    try {\n        await (0,fs_promises__WEBPACK_IMPORTED_MODULE_0__.readFile)(_config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.knownPubkeysFile);\n    } catch (error) {\n        // Initialize empty known npubs file with our initial known pubkeys\n        const initialKnownNpubs = {\n            lastUpdated: Date.now(),\n            npubs: {}\n        };\n        // Add initial npubs from config\n        for (const npub of _config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.initialKnownNpubs){\n            const hex = npubToHex(npub);\n            if (hex) {\n                // Determine the group based on npub\n                let group = 'other';\n                // Check if it's the Free Madeira npub\n                if (npub === 'npub1etgqcj9gc6yaxttuwu9eqgs3ynt2dzaudvwnrssrn2zdt2useaasfj8n6e') {\n                    group = 'freeMadeira';\n                } else if (npub === 'npub1dxd02kcjhgpkyrx60qnkd6j42kmc72u5lum0rp2ud8x5zfhnk4zscjj6hh') {\n                    group = 'agency';\n                }\n                initialKnownNpubs.npubs[hex] = {\n                    group,\n                    firstSeen: Date.now(),\n                    lastSeen: Date.now()\n                };\n            }\n        }\n        await (0,fs_promises__WEBPACK_IMPORTED_MODULE_0__.writeFile)(_config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.knownPubkeysFile, JSON.stringify(initialKnownNpubs, null, 2));\n    }\n}\n// Load current social graph data\nasync function loadSocialGraphData() {\n    try {\n        const data = await (0,fs_promises__WEBPACK_IMPORTED_MODULE_0__.readFile)(_config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.socialGraphFile, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error loading social graph data:', error);\n        return {\n            lastUpdated: 0,\n            members: {}\n        };\n    }\n}\n// Load current known npubs data\nasync function loadKnownNpubsData() {\n    try {\n        const data = await (0,fs_promises__WEBPACK_IMPORTED_MODULE_0__.readFile)(_config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.knownPubkeysFile, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error loading known npubs data:', error);\n        return {\n            lastUpdated: 0,\n            npubs: {}\n        };\n    }\n}\n// Save updated social graph data\nasync function saveSocialGraphData(data) {\n    try {\n        data.lastUpdated = Date.now();\n        await (0,fs_promises__WEBPACK_IMPORTED_MODULE_0__.writeFile)(_config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.socialGraphFile, JSON.stringify(data, null, 2));\n    } catch (error) {\n        console.error('Error saving social graph data:', error);\n    }\n}\n// Save updated known npubs data\nasync function saveKnownNpubsData(data) {\n    try {\n        data.lastUpdated = Date.now();\n        await (0,fs_promises__WEBPACK_IMPORTED_MODULE_0__.writeFile)(_config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.knownPubkeysFile, JSON.stringify(data, null, 2));\n    } catch (error) {\n        console.error('Error saving known npubs data:', error);\n    }\n}\n// Add a new npub to our known npubs\nasync function addKnownNpub(npub, group = 'other') {\n    const hex = npubToHex(npub);\n    if (!hex) return false;\n    const knownNpubs = await loadKnownNpubsData();\n    // Add or update the npub\n    knownNpubs.npubs[hex] = {\n        group,\n        firstSeen: knownNpubs.npubs[hex]?.firstSeen || Date.now(),\n        lastSeen: Date.now()\n    };\n    await saveKnownNpubsData(knownNpubs);\n    return true;\n}\n// Fetch profile metadata (kind:0) for a specific pubkey\nasync function fetchProfileMetadata(pubkey) {\n    const pool = new nostr_tools__WEBPACK_IMPORTED_MODULE_3__.SimplePool();\n    let metadata = null;\n    try {\n        // Using the subscribeMany method instead of list since list is not available in this version\n        const metadataPromise = new Promise((resolve)=>{\n            let foundMetadata = null;\n            const subscription = pool.subscribeMany(_config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.defaultRelays, [\n                {\n                    kinds: [\n                        0\n                    ],\n                    authors: [\n                        pubkey\n                    ],\n                    limit: 1\n                }\n            ], {\n                onevent (event) {\n                    try {\n                        foundMetadata = JSON.parse(event.content);\n                    } catch (e) {\n                        console.error('Failed to parse profile metadata:', e);\n                    }\n                },\n                oneose () {\n                    setTimeout(()=>{\n                        subscription.close();\n                        resolve(foundMetadata);\n                    }, 1000);\n                }\n            });\n            // Set a timeout in case we don't get EOSE\n            setTimeout(()=>{\n                subscription.close();\n                resolve(foundMetadata);\n            }, _config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.fetchTimeoutMs);\n        });\n        metadata = await metadataPromise;\n        pool.close(_config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.defaultRelays);\n        return metadata;\n    } catch (error) {\n        console.error('Error fetching profile metadata:', error);\n        pool.close(_config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.defaultRelays);\n        return null;\n    }\n}\n// Fetch follows (kind:3) events from a specific pubkey\nasync function fetchFollows(pubkey) {\n    const pool = new nostr_tools__WEBPACK_IMPORTED_MODULE_3__.SimplePool();\n    const follows = [];\n    try {\n        // Create a promise to handle the subscription\n        const followsPromise = new Promise((resolve)=>{\n            const subscription = pool.subscribeMany(_config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.defaultRelays, [\n                {\n                    kinds: [\n                        3\n                    ],\n                    authors: [\n                        pubkey\n                    ],\n                    limit: 1 // We just need the most recent one\n                }\n            ], {\n                onevent (event) {\n                    try {\n                        // Extract 'p' tags which contain followed pubkeys\n                        const followedPubkeys = event.tags.filter((tag)=>tag[0] === 'p').map((tag)=>tag[1]);\n                        follows.push(...followedPubkeys);\n                    } catch (e) {\n                        console.error('Failed to parse follows:', e);\n                    }\n                },\n                oneose () {\n                    // After EOSE (End of Stored Events)\n                    setTimeout(()=>{\n                        subscription.close();\n                        resolve(follows);\n                    }, 1000); // Give it a second to receive any last events\n                }\n            });\n            // Set a timeout in case we don't get EOSE\n            setTimeout(()=>{\n                subscription.close();\n                resolve(follows);\n            }, _config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.fetchTimeoutMs);\n        });\n        // Wait for the promise to resolve\n        const result = await followsPromise;\n        pool.close(_config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.defaultRelays);\n        return result;\n    } catch (error) {\n        console.error('Error fetching follows:', error);\n        pool.close(_config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.defaultRelays);\n        return [];\n    }\n}\n// Fetch interactions (mentions, likes, reposts, zaps) related to a pubkey\nasync function fetchInteractions(pubkey, since = 0) {\n    const pool = new nostr_tools__WEBPACK_IMPORTED_MODULE_3__.SimplePool();\n    const interactions = {\n        mentions: [],\n        likes: [],\n        reposts: [],\n        zaps: []\n    };\n    try {\n        // Create a promise to handle the subscription\n        const interactionsPromise = new Promise((resolve)=>{\n            const subscription = pool.subscribeMany(_config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.defaultRelays, [\n                {\n                    kinds: [\n                        1,\n                        6,\n                        7,\n                        9735\n                    ],\n                    '#p': [\n                        pubkey\n                    ],\n                    since: since > 0 ? since : undefined,\n                    limit: _config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.maxEventsPerRelay\n                }\n            ], {\n                onevent (event) {\n                    try {\n                        switch(event.kind){\n                            case 1:\n                                // Add author to mentions\n                                interactions.mentions.push(event.pubkey);\n                                break;\n                            case 6:\n                                // Add author to reposts\n                                interactions.reposts.push(event.pubkey);\n                                break;\n                            case 7:\n                                // Add author to likes\n                                interactions.likes.push(event.pubkey);\n                                break;\n                            case 9735:\n                                // Try to parse zap amount from tags\n                                const amountTag = event.tags.find((tag)=>tag[0] === 'amount');\n                                if (amountTag && amountTag[1]) {\n                                    const amount = parseInt(amountTag[1], 10);\n                                    if (!isNaN(amount)) {\n                                        interactions.zaps.push({\n                                            target: pubkey,\n                                            amount: amount,\n                                            timestamp: event.created_at\n                                        });\n                                    }\n                                }\n                                break;\n                        }\n                    } catch (e) {\n                        console.error('Failed to parse interaction:', e);\n                    }\n                },\n                oneose () {\n                    // After EOSE (End of Stored Events)\n                    setTimeout(()=>{\n                        subscription.close();\n                        resolve(interactions);\n                    }, 1000); // Give it a second to receive any last events\n                }\n            });\n            // Set a timeout in case we don't get EOSE\n            setTimeout(()=>{\n                subscription.close();\n                resolve(interactions);\n            }, _config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.fetchTimeoutMs);\n        });\n        // Wait for the promise to resolve\n        const result = await interactionsPromise;\n        pool.close(_config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.defaultRelays);\n        return result;\n    } catch (error) {\n        console.error('Error fetching interactions:', error);\n        pool.close(_config__WEBPACK_IMPORTED_MODULE_2__.NOSTR_CONFIG.defaultRelays);\n        return interactions;\n    }\n}\n// Update social graph with new data\nasync function updateSocialGraph() {\n    // Ensure data directories exist\n    await ensureDataDirectories();\n    // Load current data\n    const socialGraph = await loadSocialGraphData();\n    const knownNpubs = await loadKnownNpubsData();\n    // Get Free Madeira members (those with group 'freeMadeira')\n    const freeMadeiraMembers = Object.entries(knownNpubs.npubs).filter(([_, data])=>data.group === 'freeMadeira').map(([pubkey])=>pubkey);\n    // Get agency pubkeys\n    const agencyPubkeys = Object.entries(knownNpubs.npubs).filter(([_, data])=>data.group === 'agency').map(([pubkey])=>pubkey);\n    // Process Free Madeira members\n    for (const pubkey of freeMadeiraMembers){\n        console.log(`Processing Free Madeira member: ${pubkey}`);\n        // Initialize member data if not exists\n        if (!socialGraph.members[pubkey]) {\n            socialGraph.members[pubkey] = {\n                follows: [],\n                followers: [],\n                mentions: [],\n                zaps: [],\n                likes: [],\n                reposts: []\n            };\n        }\n        // Get profile metadata\n        const metadata = await fetchProfileMetadata(pubkey);\n        if (metadata) {\n            socialGraph.members[pubkey].metadata = {\n                name: metadata.name,\n                displayName: metadata.display_name || metadata.displayName,\n                picture: metadata.picture,\n                about: metadata.about,\n                nip05: metadata.nip05\n            };\n        }\n        // Get follows\n        const follows = await fetchFollows(pubkey);\n        socialGraph.members[pubkey].follows = follows;\n        // Add new pubkeys to known npubs\n        for (const followedPubkey of follows){\n            if (!knownNpubs.npubs[followedPubkey]) {\n                knownNpubs.npubs[followedPubkey] = {\n                    group: 'other',\n                    firstSeen: Date.now(),\n                    lastSeen: Date.now()\n                };\n            } else {\n                knownNpubs.npubs[followedPubkey].lastSeen = Date.now();\n            }\n            // Initialize followed member data if not exists\n            if (!socialGraph.members[followedPubkey]) {\n                socialGraph.members[followedPubkey] = {\n                    follows: [],\n                    followers: [],\n                    mentions: [],\n                    zaps: [],\n                    likes: [],\n                    reposts: []\n                };\n            }\n            // Add follower\n            if (!socialGraph.members[followedPubkey].followers.includes(pubkey)) {\n                socialGraph.members[followedPubkey].followers.push(pubkey);\n            }\n        }\n        // Fetch metadata for followed accounts if needed\n        for (const followedPubkey of follows){\n            if (!socialGraph.members[followedPubkey].metadata) {\n                const followedMetadata = await fetchProfileMetadata(followedPubkey);\n                if (followedMetadata) {\n                    socialGraph.members[followedPubkey].metadata = {\n                        name: followedMetadata.name,\n                        displayName: followedMetadata.display_name || followedMetadata.displayName,\n                        picture: followedMetadata.picture,\n                        about: followedMetadata.about,\n                        nip05: followedMetadata.nip05\n                    };\n                }\n            }\n        }\n    }\n    // Process agency interactions\n    for (const pubkey of agencyPubkeys){\n        console.log(`Processing agency account: ${pubkey}`);\n        // Initialize member data if not exists\n        if (!socialGraph.members[pubkey]) {\n            socialGraph.members[pubkey] = {\n                follows: [],\n                followers: [],\n                mentions: [],\n                zaps: [],\n                likes: [],\n                reposts: []\n            };\n        }\n        // Get profile metadata\n        const metadata = await fetchProfileMetadata(pubkey);\n        if (metadata) {\n            socialGraph.members[pubkey].metadata = {\n                name: metadata.name,\n                displayName: metadata.display_name || metadata.displayName,\n                picture: metadata.picture,\n                about: metadata.about,\n                nip05: metadata.nip05\n            };\n        }\n        // Calculate since timestamp (1 week ago)\n        const oneWeekAgo = Math.floor(Date.now() / 1000) - 7 * 24 * 60 * 60;\n        // Get interactions\n        const interactions = await fetchInteractions(pubkey, oneWeekAgo);\n        // Update interactions\n        for (const mentionPubkey of interactions.mentions){\n            if (!socialGraph.members[pubkey].mentions.includes(mentionPubkey)) {\n                socialGraph.members[pubkey].mentions.push(mentionPubkey);\n            }\n            // Add to known npubs\n            if (!knownNpubs.npubs[mentionPubkey]) {\n                knownNpubs.npubs[mentionPubkey] = {\n                    group: 'other',\n                    firstSeen: Date.now(),\n                    lastSeen: Date.now()\n                };\n            } else {\n                knownNpubs.npubs[mentionPubkey].lastSeen = Date.now();\n            }\n        }\n        for (const likePubkey of interactions.likes){\n            if (!socialGraph.members[pubkey].likes.includes(likePubkey)) {\n                socialGraph.members[pubkey].likes.push(likePubkey);\n            }\n            // Add to known npubs\n            if (!knownNpubs.npubs[likePubkey]) {\n                knownNpubs.npubs[likePubkey] = {\n                    group: 'other',\n                    firstSeen: Date.now(),\n                    lastSeen: Date.now()\n                };\n            } else {\n                knownNpubs.npubs[likePubkey].lastSeen = Date.now();\n            }\n        }\n        for (const repostPubkey of interactions.reposts){\n            if (!socialGraph.members[pubkey].reposts.includes(repostPubkey)) {\n                socialGraph.members[pubkey].reposts.push(repostPubkey);\n            }\n            // Add to known npubs\n            if (!knownNpubs.npubs[repostPubkey]) {\n                knownNpubs.npubs[repostPubkey] = {\n                    group: 'other',\n                    firstSeen: Date.now(),\n                    lastSeen: Date.now()\n                };\n            } else {\n                knownNpubs.npubs[repostPubkey].lastSeen = Date.now();\n            }\n        }\n        // Add zaps\n        socialGraph.members[pubkey].zaps.push(...interactions.zaps);\n    }\n    // Save updated data\n    await saveSocialGraphData(socialGraph);\n    await saveKnownNpubsData(knownNpubs);\n    return {\n        socialGraph,\n        knownNpubs\n    };\n}\n// Convert social graph data to visualization format\nfunction socialGraphToVisGraph(socialGraph, knownNpubs) {\n    const nodes = [];\n    const links = [];\n    const nodeMap = new Map();\n    // Helper to determine node type\n    function getNodeType(pubkey) {\n        const npubData = knownNpubs.npubs[pubkey];\n        if (!npubData) return _config__WEBPACK_IMPORTED_MODULE_2__.NodeType.FOLLOWING;\n        if (npubData.group === 'freeMadeira') {\n            return _config__WEBPACK_IMPORTED_MODULE_2__.NodeType.CORE;\n        }\n        // Check if it's mutual with any core member\n        const member = socialGraph.members[pubkey];\n        if (!member) return _config__WEBPACK_IMPORTED_MODULE_2__.NodeType.FOLLOWING;\n        const coreMembers = Object.entries(knownNpubs.npubs).filter(([_, data])=>data.group === 'freeMadeira').map(([pubkey])=>pubkey);\n        // Check if this pubkey follows any core members\n        const followsCore = member.follows.some((followedPubkey)=>coreMembers.includes(followedPubkey));\n        // Check if this pubkey is followed by any core members\n        const followedByCore = member.followers.some((followerPubkey)=>coreMembers.includes(followerPubkey));\n        if (followsCore && followedByCore) {\n            return _config__WEBPACK_IMPORTED_MODULE_2__.NodeType.MUTUAL;\n        } else if (followsCore) {\n            return _config__WEBPACK_IMPORTED_MODULE_2__.NodeType.FOLLOWER;\n        } else if (followedByCore) {\n            return _config__WEBPACK_IMPORTED_MODULE_2__.NodeType.FOLLOWING;\n        }\n        return _config__WEBPACK_IMPORTED_MODULE_2__.NodeType.FOLLOWING;\n    }\n    // Add nodes for each member\n    Object.keys(socialGraph.members).forEach((pubkey)=>{\n        if (nodeMap.has(pubkey)) return;\n        const member = socialGraph.members[pubkey];\n        let npub;\n        try {\n            npub = hexToNpub(pubkey) || 'unknown';\n        } catch (e) {\n            npub = 'unknown';\n        }\n        nodes.push({\n            id: pubkey,\n            name: member.metadata?.displayName || member.metadata?.name,\n            npub,\n            type: getNodeType(pubkey),\n            picture: member.metadata?.picture\n        });\n        nodeMap.set(pubkey, true);\n    });\n    // Add links for follows\n    Object.keys(socialGraph.members).forEach((pubkey)=>{\n        const member = socialGraph.members[pubkey];\n        member.follows.forEach((targetPubkey)=>{\n            // Only add links where both nodes exist\n            if (socialGraph.members[targetPubkey]) {\n                links.push({\n                    source: pubkey,\n                    target: targetPubkey,\n                    value: 1,\n                    type: 'follows'\n                });\n            }\n        });\n    });\n    return {\n        nodes,\n        links,\n        timestamp: socialGraph.lastUpdated\n    };\n}\n// API to get social graph data in visualization format\nasync function getSocialGraphData() {\n    await ensureDataDirectories();\n    const socialGraph = await loadSocialGraphData();\n    const knownNpubs = await loadKnownNpubsData();\n    return socialGraphToVisGraph(socialGraph, knownNpubs);\n}\n// API to get raw social graph data\nasync function getRawSocialGraphData() {\n    await ensureDataDirectories();\n    return await loadSocialGraphData();\n}\n// API to get known npubs data\nasync function getKnownNpubsData() {\n    await ensureDataDirectories();\n    return await loadKnownNpubsData();\n}\n// API to force update the social graph\nasync function forceSocialGraphUpdate() {\n    await updateSocialGraph();\n    return await getSocialGraphData();\n}\n// Set up a scheduled update (can be called from a Next.js API route)\nasync function setupScheduledUpdate(intervalInHours = 24) {\n    // First update immediately\n    await updateSocialGraph();\n    // Then schedule regular updates\n    setInterval(async ()=>{\n        await updateSocialGraph();\n    }, intervalInHours * 60 * 60 * 1000);\n}\n// Export utility functions\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/nostr/NostrSocialGraphFetcher.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/nostr/config.ts":
/*!*********************************!*\
  !*** ./src/lib/nostr/config.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InteractionType: () => (/* binding */ InteractionType),\n/* harmony export */   NOSTR_CONFIG: () => (/* binding */ NOSTR_CONFIG),\n/* harmony export */   NodeType: () => (/* binding */ NodeType),\n/* harmony export */   NostrEventKind: () => (/* binding */ NostrEventKind),\n/* harmony export */   VISUALIZATION_CONFIG: () => (/* binding */ VISUALIZATION_CONFIG)\n/* harmony export */ });\n/**\n * Nostr configuration for the social graph fetcher\n */ const NOSTR_CONFIG = {\n    // Default relays to connect to\n    defaultRelays: [\n        'wss://relay.damus.io',\n        'wss://relay.primal.net',\n        'wss://nos.lol',\n        'wss://nostr.wine',\n        'wss://relay.snort.social'\n    ],\n    // Initial set of known npubs (Free Madeira members)\n    // This is just an initial set - more can be added via the API\n    initialKnownNpubs: [\n        // Free Madeira \n        'npub1etgqcj9gc6yaxttuwu9eqgs3ynt2dzaudvwnrssrn2zdt2useaasfj8n6e',\n        // Madtrips agency\n        'npub1dxd02kcjhgpkyrx60qnkd6j42kmc72u5lum0rp2ud8x5zfhnk4zscjj6hh'\n    ],\n    // Timeouts and limits\n    fetchTimeoutMs: 10000,\n    maxEventsPerRelay: 500,\n    // Data file paths (relative to project root)\n    dataPath: './data',\n    socialGraphFile: './data/social-graph.json',\n    knownPubkeysFile: './data/known-pubkeys.json'\n};\n// Social graph node types\nvar NodeType = /*#__PURE__*/ function(NodeType) {\n    NodeType[\"CORE\"] = \"core\";\n    NodeType[\"FOLLOWER\"] = \"follower\";\n    NodeType[\"FOLLOWING\"] = \"following\";\n    NodeType[\"MUTUAL\"] = \"mutual\";\n    return NodeType;\n}({});\n// Interaction types\nvar InteractionType = /*#__PURE__*/ function(InteractionType) {\n    InteractionType[\"FOLLOWS\"] = \"follows\";\n    InteractionType[\"MENTIONED\"] = \"mentioned\";\n    InteractionType[\"REPLIED\"] = \"replied\";\n    InteractionType[\"REPOSTED\"] = \"reposted\";\n    InteractionType[\"LIKED\"] = \"liked\";\n    InteractionType[\"ZAPPED\"] = \"zapped\";\n    return InteractionType;\n}({});\n// Event kinds we're interested in\nvar NostrEventKind = /*#__PURE__*/ function(NostrEventKind) {\n    NostrEventKind[NostrEventKind[\"METADATA\"] = 0] = \"METADATA\";\n    NostrEventKind[NostrEventKind[\"TEXT_NOTE\"] = 1] = \"TEXT_NOTE\";\n    NostrEventKind[NostrEventKind[\"RECOMMEND_RELAY\"] = 2] = \"RECOMMEND_RELAY\";\n    NostrEventKind[NostrEventKind[\"CONTACTS\"] = 3] = \"CONTACTS\";\n    NostrEventKind[NostrEventKind[\"ENCRYPTED_DM\"] = 4] = \"ENCRYPTED_DM\";\n    NostrEventKind[NostrEventKind[\"DELETE\"] = 5] = \"DELETE\";\n    NostrEventKind[NostrEventKind[\"REPOST\"] = 6] = \"REPOST\";\n    NostrEventKind[NostrEventKind[\"REACTION\"] = 7] = \"REACTION\";\n    NostrEventKind[NostrEventKind[\"ZAP\"] = 9735] = \"ZAP\";\n    return NostrEventKind;\n}({});\n// Configuration for the visualization\nconst VISUALIZATION_CONFIG = {\n    coreNodeColor: '#9333EA',\n    followerNodeColor: '#3B82F6',\n    followingNodeColor: '#22C55E',\n    mutualNodeColor: '#F59E0B',\n    defaultNodeSize: 5,\n    coreNodeSize: 10,\n    linkDistance: 100,\n    linkStrength: 0.1\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL25vc3RyL2NvbmZpZy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztDQUVDLEdBRU0sTUFBTUEsZUFBZTtJQUMxQiwrQkFBK0I7SUFDL0JDLGVBQWU7UUFDYjtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFFRCxvREFBb0Q7SUFDcEQsOERBQThEO0lBQzlEQyxtQkFBbUI7UUFDakIsZ0JBQWdCO1FBQ2hCO1FBRUEsa0JBQWtCO1FBQ2xCO0tBQ0Q7SUFFRCxzQkFBc0I7SUFDdEJDLGdCQUFnQjtJQUNoQkMsbUJBQW1CO0lBRW5CLDZDQUE2QztJQUM3Q0MsVUFBVTtJQUNWQyxpQkFBaUI7SUFDakJDLGtCQUFrQjtBQUNwQixFQUFFO0FBRUYsMEJBQTBCO0FBQ25CLHNDQUFLQzs7Ozs7V0FBQUE7TUFLWDtBQUVELG9CQUFvQjtBQUNiLDZDQUFLQzs7Ozs7OztXQUFBQTtNQU9YO0FBRUQsa0NBQWtDO0FBQzNCLDRDQUFLQzs7Ozs7Ozs7OztXQUFBQTtNQVVYO0FBRUQsc0NBQXNDO0FBQy9CLE1BQU1DLHVCQUF1QjtJQUNsQ0MsZUFBZTtJQUNmQyxtQkFBbUI7SUFDbkJDLG9CQUFvQjtJQUNwQkMsaUJBQWlCO0lBQ2pCQyxpQkFBaUI7SUFDakJDLGNBQWM7SUFDZEMsY0FBYztJQUNkQyxjQUFjO0FBQ2hCLEVBQUUiLCJzb3VyY2VzIjpbIi9ob21lL2xmZy9HaXQvTWFkdHJpcHMvc3JjL2xpYi9ub3N0ci9jb25maWcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBOb3N0ciBjb25maWd1cmF0aW9uIGZvciB0aGUgc29jaWFsIGdyYXBoIGZldGNoZXJcbiAqL1xuXG5leHBvcnQgY29uc3QgTk9TVFJfQ09ORklHID0ge1xuICAvLyBEZWZhdWx0IHJlbGF5cyB0byBjb25uZWN0IHRvXG4gIGRlZmF1bHRSZWxheXM6IFtcbiAgICAnd3NzOi8vcmVsYXkuZGFtdXMuaW8nLFxuICAgICd3c3M6Ly9yZWxheS5wcmltYWwubmV0JyxcbiAgICAnd3NzOi8vbm9zLmxvbCcsXG4gICAgJ3dzczovL25vc3RyLndpbmUnLFxuICAgICd3c3M6Ly9yZWxheS5zbm9ydC5zb2NpYWwnXG4gIF0sXG4gIFxuICAvLyBJbml0aWFsIHNldCBvZiBrbm93biBucHVicyAoRnJlZSBNYWRlaXJhIG1lbWJlcnMpXG4gIC8vIFRoaXMgaXMganVzdCBhbiBpbml0aWFsIHNldCAtIG1vcmUgY2FuIGJlIGFkZGVkIHZpYSB0aGUgQVBJXG4gIGluaXRpYWxLbm93bk5wdWJzOiBbXG4gICAgLy8gRnJlZSBNYWRlaXJhIFxuICAgICducHViMWV0Z3FjajlnYzZ5YXh0dHV3dTllcWdzM3ludDJkemF1ZHZ3bnJzc3JuMnpkdDJ1c2VhYXNmajhuNmUnLFxuICAgIFxuICAgIC8vIE1hZHRyaXBzIGFnZW5jeVxuICAgICducHViMWR4ZDAya2NqaGdwa3lyeDYwcW5rZDZqNDJrbWM3MnU1bHVtMHJwMnVkOHg1emZobms0enNjamo2aGgnLFxuICBdLFxuICBcbiAgLy8gVGltZW91dHMgYW5kIGxpbWl0c1xuICBmZXRjaFRpbWVvdXRNczogMTAwMDAsIC8vIDEwIHNlY29uZHNcbiAgbWF4RXZlbnRzUGVyUmVsYXk6IDUwMCxcbiAgXG4gIC8vIERhdGEgZmlsZSBwYXRocyAocmVsYXRpdmUgdG8gcHJvamVjdCByb290KVxuICBkYXRhUGF0aDogJy4vZGF0YScsXG4gIHNvY2lhbEdyYXBoRmlsZTogJy4vZGF0YS9zb2NpYWwtZ3JhcGguanNvbicsXG4gIGtub3duUHVia2V5c0ZpbGU6ICcuL2RhdGEva25vd24tcHVia2V5cy5qc29uJyxcbn07XG5cbi8vIFNvY2lhbCBncmFwaCBub2RlIHR5cGVzXG5leHBvcnQgZW51bSBOb2RlVHlwZSB7XG4gIENPUkUgPSAnY29yZScsICAgICAgLy8gQ29yZSBGcmVlIE1hZGVpcmEgbWVtYmVyXG4gIEZPTExPV0VSID0gJ2ZvbGxvd2VyJywgIC8vIEZvbGxvd3MgRnJlZSBNYWRlaXJhIG1lbWJlcnNcbiAgRk9MTE9XSU5HID0gJ2ZvbGxvd2luZycsIC8vIEZvbGxvd2VkIGJ5IEZyZWUgTWFkZWlyYSBtZW1iZXJzXG4gIE1VVFVBTCA9ICdtdXR1YWwnLCAgICAvLyBNdXR1YWwgZm9sbG93cyB3aXRoIEZyZWUgTWFkZWlyYSBtZW1iZXJzXG59XG5cbi8vIEludGVyYWN0aW9uIHR5cGVzXG5leHBvcnQgZW51bSBJbnRlcmFjdGlvblR5cGUge1xuICBGT0xMT1dTID0gJ2ZvbGxvd3MnLFxuICBNRU5USU9ORUQgPSAnbWVudGlvbmVkJyxcbiAgUkVQTElFRCA9ICdyZXBsaWVkJyxcbiAgUkVQT1NURUQgPSAncmVwb3N0ZWQnLFxuICBMSUtFRCA9ICdsaWtlZCcsXG4gIFpBUFBFRCA9ICd6YXBwZWQnLFxufVxuXG4vLyBFdmVudCBraW5kcyB3ZSdyZSBpbnRlcmVzdGVkIGluXG5leHBvcnQgZW51bSBOb3N0ckV2ZW50S2luZCB7XG4gIE1FVEFEQVRBID0gMCxcbiAgVEVYVF9OT1RFID0gMSxcbiAgUkVDT01NRU5EX1JFTEFZID0gMixcbiAgQ09OVEFDVFMgPSAzLFxuICBFTkNSWVBURURfRE0gPSA0LFxuICBERUxFVEUgPSA1LFxuICBSRVBPU1QgPSA2LFxuICBSRUFDVElPTiA9IDcsXG4gIFpBUCA9IDk3MzUsXG59XG5cbi8vIENvbmZpZ3VyYXRpb24gZm9yIHRoZSB2aXN1YWxpemF0aW9uXG5leHBvcnQgY29uc3QgVklTVUFMSVpBVElPTl9DT05GSUcgPSB7XG4gIGNvcmVOb2RlQ29sb3I6ICcjOTMzM0VBJywgLy8gUHVycGxlIGZvciBGcmVlIE1hZGVpcmFcbiAgZm9sbG93ZXJOb2RlQ29sb3I6ICcjM0I4MkY2JywgLy8gQmx1ZVxuICBmb2xsb3dpbmdOb2RlQ29sb3I6ICcjMjJDNTVFJywgLy8gR3JlZW5cbiAgbXV0dWFsTm9kZUNvbG9yOiAnI0Y1OUUwQicsIC8vIEFtYmVyXG4gIGRlZmF1bHROb2RlU2l6ZTogNSxcbiAgY29yZU5vZGVTaXplOiAxMCxcbiAgbGlua0Rpc3RhbmNlOiAxMDAsXG4gIGxpbmtTdHJlbmd0aDogMC4xLFxufTsgIl0sIm5hbWVzIjpbIk5PU1RSX0NPTkZJRyIsImRlZmF1bHRSZWxheXMiLCJpbml0aWFsS25vd25OcHVicyIsImZldGNoVGltZW91dE1zIiwibWF4RXZlbnRzUGVyUmVsYXkiLCJkYXRhUGF0aCIsInNvY2lhbEdyYXBoRmlsZSIsImtub3duUHVia2V5c0ZpbGUiLCJOb2RlVHlwZSIsIkludGVyYWN0aW9uVHlwZSIsIk5vc3RyRXZlbnRLaW5kIiwiVklTVUFMSVpBVElPTl9DT05GSUciLCJjb3JlTm9kZUNvbG9yIiwiZm9sbG93ZXJOb2RlQ29sb3IiLCJmb2xsb3dpbmdOb2RlQ29sb3IiLCJtdXR1YWxOb2RlQ29sb3IiLCJkZWZhdWx0Tm9kZVNpemUiLCJjb3JlTm9kZVNpemUiLCJsaW5rRGlzdGFuY2UiLCJsaW5rU3RyZW5ndGgiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/nostr/config.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("fs/promises");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:crypto");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/nostr-tools","vendor-chunks/@noble"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdiagnosis%2Froute&page=%2Fapi%2Fdiagnosis%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdiagnosis%2Froute.ts&appDir=%2Fhome%2Flfg%2FGit%2FMadtrips%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Flfg%2FGit%2FMadtrips&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();
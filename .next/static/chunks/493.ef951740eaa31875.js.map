{"version":3,"file":"static/chunks/493.ef951740eaa31875.js","mappings":"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","sources":["webpack://_N_E/./src/components/LightningPaymentButton.tsx","webpack://_N_E/./src/lib/nostr/test-integration.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState } from 'react';\nimport { useNostr } from '@/lib/contexts/NostrContext';\n\ninterface LightningPaymentButtonProps {\n  invoice: string;\n  onSuccess?: (preimage: string) => void;\n  onError?: (error: Error) => void;\n  buttonText?: string;\n  className?: string;\n}\n\nexport const LightningPaymentButton: React.FC<LightningPaymentButtonProps> = ({\n  invoice,\n  onSuccess,\n  onError,\n  buttonText = 'Pay with Lightning',\n  className = 'px-4 py-2 bg-yellow-500 hover:bg-yellow-600 text-white rounded-md font-medium flex items-center justify-center'\n}) => {\n  const { user, payInvoice, canMakePayments, loginMethod } = useNostr();\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handlePayment = async () => {\n    if (!user) {\n      setError('Please log in to make a payment');\n      onError?.(new Error('User not logged in'));\n      return;\n    }\n\n    if (!canMakePayments || !payInvoice) {\n      setError(`Payments not supported with current login method (${loginMethod})`);\n      onError?.(new Error('Payment method not supported'));\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await payInvoice(invoice);\n      setSuccess(true);\n      onSuccess?.(result.preimage);\n      console.log('Payment successful!', result);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown payment error';\n      setError(errorMessage);\n      onError?.(err instanceof Error ? err : new Error(errorMessage));\n      console.error('Payment failed:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center\">\n      <button\n        onClick={handlePayment}\n        disabled={loading || success || !canMakePayments || !user}\n        className={`${className} ${loading ? 'opacity-70 cursor-wait' : ''} \n                  ${success ? 'bg-green-500 hover:bg-green-500' : ''} \n                  ${!canMakePayments || !user ? 'opacity-50 cursor-not-allowed' : ''}`}\n      >\n        {loading ? (\n          <>\n            <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n              <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n              <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n            </svg>\n            Processing...\n          </>\n        ) : success ? (\n          <>\n            <svg className=\"-ml-1 mr-2 h-5 w-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\"></path>\n            </svg>\n            Payment Successful\n          </>\n        ) : (\n          <>\n            <svg className=\"-ml-1 mr-2 h-5 w-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M11 3a1 1 0 10-2 0v1a1 1 0 102 0V3zM15.657 5.757a1 1 0 00-1.414-1.414l-.707.707a1 1 0 001.414 1.414l.707-.707zM18 10a1 1 0 01-1 1h-1a1 1 0 110-2h1a1 1 0 011 1zM5.05 6.464A1 1 0 106.464 5.05l-.707-.707a1 1 0 00-1.414 1.414l.707.707zM5 10a1 1 0 01-1 1H3a1 1 0 110-2h1a1 1 0 011 1zM8 16v-1h4v1a2 2 0 11-4 0zM12 14c.015-.34.208-.646.477-.859a4 4 0 10-4.954 0c.27.213.462.519.476.859h4.002z\"></path>\n            </svg>\n            {buttonText}\n          </>\n        )}\n      </button>\n\n      {error && (\n        <div className=\"mt-2 text-sm text-red-600 text-center\">\n          {error}\n        </div>\n      )}\n\n      {!user && (\n        <div className=\"mt-2 text-sm text-amber-600 dark:text-amber-400 text-center\">\n          Please log in to make a payment\n        </div>\n      )}\n\n      {user && !canMakePayments && (\n        <div className=\"mt-2 text-sm text-amber-600 dark:text-amber-400 text-center\">\n          Your current login method does not support payments. Try using NIP-47 (remote signer).\n        </div>\n      )}\n    </div>\n  );\n}; ","'use client';\n\nimport React, { useState } from 'react';\nimport { useNostr } from '../contexts/NostrContext';\nimport { LightningPaymentButton } from '../../components/LightningPaymentButton';\n\n/**\n * This component demonstrates the Nostr payment integration features\n * You can use this in your app to test the payment flow\n */\nexport default function NostrIntegrationTest() {\n  const { user, loading, loginMethod, canMakePayments } = useNostr();\n  const [invoice, setInvoice] = useState<string>('');\n  const [paymentResult, setPaymentResult] = useState<string | null>(null);\n  const [paymentError, setPaymentError] = useState<string | null>(null);\n\n  const handleInvoiceChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInvoice(e.target.value);\n  };\n\n  const handlePaymentSuccess = (preimage: string) => {\n    setPaymentResult(`Payment successful! Preimage: ${preimage}`);\n    setPaymentError(null);\n  };\n\n  const handlePaymentError = (error: Error) => {\n    setPaymentError(`Payment failed: ${error.message}`);\n    setPaymentResult(null);\n  };\n\n  return (\n    <div className=\"max-w-3xl mx-auto p-6\">\n      <h1 className=\"text-3xl font-bold mb-6\">Nostr Payment Integration Test</h1>\n\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6\">\n        <h2 className=\"text-xl font-bold mb-4\">Connection Status</h2>\n        \n        {loading ? (\n          <p className=\"text-gray-500\">Loading...</p>\n        ) : user ? (\n          <div className=\"space-y-2\">\n            <p className=\"text-green-500 font-medium\">\n              ✅ Connected as: {user.profile?.displayName || user.profile?.name || user.npub}\n            </p>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Login Method: <span className=\"font-medium\">{loginMethod}</span>\n            </p>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Payment Capable: \n              <span className={`font-medium ${canMakePayments ? 'text-green-500' : 'text-red-500'}`}>\n                {canMakePayments ? ' Yes' : ' No'}\n              </span>\n            </p>\n          </div>\n        ) : (\n          <p className=\"text-amber-500\">\n            Not connected. Please log in using the Nostr login button.\n          </p>\n        )}\n      </div>\n\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6\">\n        <h2 className=\"text-xl font-bold mb-4\">Lightning Payment Test</h2>\n        \n        <div className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"invoice\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n              Lightning Invoice (BOLT11)\n            </label>\n            <input\n              type=\"text\"\n              id=\"invoice\"\n              value={invoice}\n              onChange={handleInvoiceChange}\n              placeholder=\"lnbc...\"\n              className=\"w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white\"\n            />\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Enter a Lightning invoice to test the payment process.\n            </p>\n          </div>\n\n          <div className=\"flex justify-center\">\n            <LightningPaymentButton \n              invoice={invoice}\n              onSuccess={handlePaymentSuccess}\n              onError={handlePaymentError}\n              buttonText=\"Pay Lightning Invoice\"\n            />\n          </div>\n\n          {paymentResult && (\n            <div className=\"mt-4 p-3 bg-green-100 dark:bg-green-900 border border-green-200 dark:border-green-800 rounded-md text-green-800 dark:text-green-200\">\n              {paymentResult}\n            </div>\n          )}\n\n          {paymentError && (\n            <div className=\"mt-4 p-3 bg-red-100 dark:bg-red-900 border border-red-200 dark:border-red-800 rounded-md text-red-800 dark:text-red-200\">\n              {paymentError}\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6\">\n        <h2 className=\"text-xl font-bold mb-4\">Integration Notes</h2>\n        \n        <div className=\"space-y-3 text-gray-700 dark:text-gray-300\">\n          <p>\n            <strong>NIP-07 Extension Users:</strong> Most browser extensions like Alby or nos2x don't directly \n            support the payment method, so you'll need to use a NIP-47 signer.\n          </p>\n          \n          <p>\n            <strong>NIP-47 Signers:</strong> To test payments, you need a remote signer that supports the \n            <code className=\"px-1 bg-gray-100 dark:bg-gray-700 rounded\">pay_invoice</code> method.\n          </p>\n          \n          <p>\n            <strong>View-Only Mode:</strong> Payment functionality is disabled in view-only mode.\n          </p>\n          \n          <p className=\"font-medium\">\n            This implementation follows the <a href=\"https://github.com/nostr-protocol/nips/blob/master/47.md\" \n            className=\"text-blue-500 hover:underline\" target=\"_blank\" rel=\"noopener noreferrer\">NIP-47 specification</a> \n            and is compatible with wallets that support the Nostr Wallet Connect protocol.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n} "],"names":["LightningPaymentButton","invoice","onSuccess","onError","buttonText","className","user","payInvoice","canMakePayments","loginMethod","useNostr","loading","setLoading","useState","success","setSuccess","error","setError","handlePayment","result","preimage","console","log","err","errorMessage","Error","message","div","button","onClick","disabled","svg","xmlns","fill","viewBox","circle","cx","cy","r","stroke","strokeWidth","path","d","fillRule","clipRule","NostrIntegrationTest","setInvoice","paymentResult","setPaymentResult","paymentError","setPaymentError","h1","h2","p","profile","displayName","name","npub","span","label","htmlFor","input","type","id","value","onChange","e","handleInvoiceChange","target","placeholder","handlePaymentSuccess","handlePaymentError","strong","code","a","href","rel"],"sourceRoot":"","ignoreList":[]}
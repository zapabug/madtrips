{"version":3,"file":"static/chunks/app/payment-example/page-152da0733493f86d.js","mappings":"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","sources":["webpack://_N_E/","webpack://_N_E/./src/lib/services/PaymentService.ts","webpack://_N_E/./src/components/NostrPayment.tsx","webpack://_N_E/./src/app/payment-example/page.tsx"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"/home/lfg/Git/Madtrips/src/app/payment-example/page.tsx\");\n","import { NIP47Client } from '@/lib/nostr/nip47';\nimport NDK, { NDKEvent, NDKFilter, NDKSubscription } from '@nostr-dev-kit/ndk';\nimport { Event as NostrEvent } from 'nostr-tools';\n\n// Define a more accurate interface for payment responses\ninterface PaymentResponse {\n  id: string;\n  result?: {\n    preimage: string;\n    paymentHash: string;\n  };\n  error?: {\n    code: number;\n    message: string;\n  };\n}\n\n/**\n * PaymentService - Service to handle Lightning payments using NIP-47\n * This service integrates with the NIP47Client to manage payment operations\n */\nexport class PaymentService {\n  private ndk: NDK;\n  private client: NIP47Client | null = null;\n  private paymentSubscription: NDKSubscription | null = null;\n  private pendingPayments: Map<string, { \n    resolve: (value: any) => void;\n    reject: (error: any) => void;\n    invoice: string;\n  }> = new Map();\n\n  /**\n   * Create a new PaymentService\n   * @param ndk The NDK instance to use for communication\n   */\n  constructor(ndk: NDK) {\n    this.ndk = ndk;\n  }\n\n  /**\n   * Connect to a remote signer\n   * @param remoteUrl The NIP-47 compatible wallet URL or pubkey\n   * @param relayUrl Optional specific relay to use for communication\n   */\n  async connect(remoteUrl: string, relayUrl?: string): Promise<void> {\n    try {\n      // Disconnect any existing client\n      await this.disconnect();\n      \n      // Create a new client\n      this.client = new NIP47Client(remoteUrl, relayUrl);\n      \n      // Connect to the remote signer\n      await this.client.connect();\n      \n      // Set up subscription for payment responses\n      await this.setupPaymentResponseSubscription();\n      \n      console.log('Payment service connected to wallet');\n    } catch (error) {\n      console.error('Failed to connect payment service:', error);\n      this.client = null;\n      throw error;\n    }\n  }\n\n  /**\n   * Set up subscription for payment responses\n   */\n  private async setupPaymentResponseSubscription(): Promise<void> {\n    if (!this.client || !this.ndk) {\n      throw new Error('Client or NDK not initialized');\n    }\n    \n    // Get the remote signer's pubkey\n    const remotePubkey = this.client.getPublicKey ? await this.client.getPublicKey() : '';\n    \n    // Create a filter for payment response events\n    const filter: NDKFilter = {\n      kinds: [24133], // NIP-47 response event kind\n      '#p': [remotePubkey], // Events directed to our client\n    };\n    \n    // Create a subscription\n    this.paymentSubscription = this.ndk.subscribe(filter, {\n      closeOnEose: false,\n    });\n    \n    // Handle events\n    this.paymentSubscription.on('event', async (event: NDKEvent) => {\n      try {\n        if (!this.client) return;\n        \n        // Get the raw event and ensure it has the required properties\n        const rawEvent = event.rawEvent();\n        if (!rawEvent || typeof rawEvent.kind !== 'number') {\n          console.error('Invalid event received');\n          return;\n        }\n        \n        // Process the payment response\n        const response = await this.client.processPaymentResponse(rawEvent as NostrEvent) as PaymentResponse;\n        \n        if (response && response.id && this.pendingPayments.has(response.id)) {\n          const pendingPayment = this.pendingPayments.get(response.id)!;\n          \n          if (response.error) {\n            pendingPayment.reject(new Error(`Payment error: ${response.error.message}`));\n          } else if (response.result) {\n            pendingPayment.resolve(response.result);\n          } else {\n            pendingPayment.reject(new Error('Invalid payment response'));\n          }\n          \n          this.pendingPayments.delete(response.id);\n        }\n      } catch (error) {\n        console.error('Failed to process payment response event:', error);\n      }\n    });\n    \n    console.log('Payment response subscription set up');\n  }\n\n  /**\n   * Check if the service is connected to a wallet\n   */\n  isConnected(): boolean {\n    return this.client !== null;\n  }\n\n  /**\n   * Get wallet information\n   */\n  async getWalletInfo(): Promise<any> {\n    if (!this.client) {\n      throw new Error('Not connected to a wallet');\n    }\n    \n    return await this.client.getInfo();\n  }\n\n  /**\n   * Get wallet balance\n   */\n  async getBalance(): Promise<{ balance: number, currency: string }> {\n    if (!this.client) {\n      throw new Error('Not connected to a wallet');\n    }\n    \n    return await this.client.getBalance();\n  }\n\n  /**\n   * Pay a Lightning invoice\n   * @param invoice BOLT11 Lightning invoice to pay\n   * @returns Payment result including preimage and payment hash\n   */\n  async payInvoice(invoice: string): Promise<{ preimage: string, paymentHash: string }> {\n    if (!this.client) {\n      throw new Error('Not connected to a wallet');\n    }\n    \n    // For demonstration purposes, we'll just call the client method directly\n    // In a production app, you would use the event-based approach with proper\n    // subscription handling\n    return await this.client.payInvoice(invoice);\n  }\n\n  /**\n   * Process a payment using the event-based approach\n   * This is more complex but follows the correct NIP-47 flow\n   * @param invoice BOLT11 Lightning invoice to pay\n   */\n  async processPaymentEvent(invoice: string): Promise<{ preimage: string, paymentHash: string }> {\n    if (!this.client || !this.ndk) {\n      throw new Error('Not connected to a wallet');\n    }\n    \n    try {\n      // Create a payment request event\n      const event = await this.client.createPaymentRequestEvent(invoice);\n      \n      // Create a promise that will be resolved when the payment response is received\n      const paymentPromise = new Promise<{ preimage: string, paymentHash: string }>((resolve, reject) => {\n        if (!event.id) {\n          reject(new Error('Invalid payment request event'));\n          return;\n        }\n        \n        // Store the pending payment\n        this.pendingPayments.set(event.id, { resolve, reject, invoice });\n        \n        // Set a timeout for the payment\n        setTimeout(() => {\n          if (event.id && this.pendingPayments.has(event.id)) {\n            this.pendingPayments.delete(event.id);\n            reject(new Error('Payment timeout'));\n          }\n        }, 60000); // 60 second timeout\n      });\n      \n      // Create an NDK event and publish it\n      const ndkEvent = new NDKEvent(this.ndk);\n      if (event.kind) ndkEvent.kind = event.kind;\n      ndkEvent.tags = event.tags || [];\n      ndkEvent.content = event.content || '';\n      ndkEvent.created_at = event.created_at || Math.floor(Date.now() / 1000);\n      \n      // Publish the event\n      await ndkEvent.publish();\n      \n      console.log('Payment request published, waiting for response...');\n      \n      // Wait for the payment response\n      return await paymentPromise;\n    } catch (error) {\n      console.error('Failed to process payment:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Disconnect from the wallet\n   */\n  async disconnect(): Promise<void> {\n    if (this.paymentSubscription) {\n      this.paymentSubscription.stop();\n      this.paymentSubscription = null;\n    }\n    \n    if (this.client) {\n      this.client.disconnect();\n      this.client = null;\n    }\n    \n    // Clear any pending payments\n    for (const [id, { reject }] of this.pendingPayments) {\n      reject(new Error('Disconnected from wallet'));\n      this.pendingPayments.delete(id);\n    }\n    \n    console.log('Payment service disconnected');\n  }\n}\n\n// Create a singleton instance\nlet paymentServiceInstance: PaymentService | null = null;\n\n/**\n * Get or create the payment service instance\n */\nexport const getPaymentService = (ndk: NDK): PaymentService => {\n  if (!paymentServiceInstance) {\n    paymentServiceInstance = new PaymentService(ndk);\n  }\n  return paymentServiceInstance;\n}; ","'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useNostr } from '@/lib/contexts/NostrContext';\nimport { getPaymentService } from '@/lib/services/PaymentService';\n\n// Define WebLN interface directly in this file\ninterface WebLNProvider {\n  enable: () => Promise<void>;\n  sendPayment: (invoice: string) => Promise<{\n    preimage: string;\n    paymentHash?: string;\n  }>;\n}\n\n// Add a type declaration that is specific to this file\ndeclare global {\n  interface Window {\n    webln?: WebLNProvider;\n  }\n}\n\ninterface NostrPaymentProps {\n  invoice: string;\n  amount: string;\n  description: string;\n  onSuccess?: (preimage: string) => void;\n  onError?: (error: Error) => void;\n  onCancel?: () => void;\n}\n\nexport const NostrPayment: React.FC<NostrPaymentProps> = ({\n  invoice,\n  amount,\n  description,\n  onSuccess,\n  onError,\n  onCancel\n}) => {\n  const { ndk, user, loginMethod } = useNostr();\n  const [status, setStatus] = useState<'idle' | 'connecting' | 'paying' | 'success' | 'error'>('idle');\n  const [error, setError] = useState<string | null>(null);\n  const [preimage, setPreimage] = useState<string | null>(null);\n  const [walletConnected, setWalletConnected] = useState(false);\n\n  // Check if the user is logged in with NIP-47\n  const isNip47 = loginMethod === 'nip47';\n\n  // Effect to handle payment when invoice changes\n  useEffect(() => {\n    setStatus('idle');\n    setError(null);\n    setPreimage(null);\n  }, [invoice]);\n\n  // Connect to the wallet\n  const connectWallet = async () => {\n    if (!ndk || !user) {\n      setError('You must be logged in to make a payment');\n      return;\n    }\n\n    try {\n      setStatus('connecting');\n      \n      const paymentService = getPaymentService(ndk);\n      \n      // If using NIP-47, we can use the existing connection\n      if (isNip47) {\n        setWalletConnected(true);\n        setStatus('idle');\n        return;\n      }\n      \n      // For NIP-07, we need to prompt the user\n      // NIP-07 doesn't need explicit connection for payments - the browser extension handles it\n      if (loginMethod === 'nip07') {\n        setWalletConnected(true);\n        setStatus('idle');\n        return;\n      }\n      \n      // If we're in view-only mode, we can't make payments\n      if (loginMethod === 'viewonly') {\n        throw new Error('Cannot make payments in view-only mode');\n      }\n      \n      // If no method is detected, show an error\n      throw new Error('No compatible payment method detected');\n      \n    } catch (err) {\n      console.error('Failed to connect wallet:', err);\n      setError(err instanceof Error ? err.message : 'Failed to connect wallet');\n      setStatus('error');\n    }\n  };\n\n  // Process payment\n  const processPayment = async () => {\n    if (!ndk || !user) {\n      setError('You must be logged in to make a payment');\n      return;\n    }\n\n    try {\n      setStatus('paying');\n      \n      const paymentService = getPaymentService(ndk);\n      \n      // Different payment approaches based on login method\n      if (isNip47) {\n        // For NIP-47, use the remote signer\n        const result = await paymentService.payInvoice(invoice);\n        setPreimage(result.preimage);\n        setStatus('success');\n        onSuccess?.(result.preimage);\n      } else if (loginMethod === 'nip07') {\n        // For NIP-07, use the extension's webln if available\n        if (typeof window !== 'undefined' && window.webln) {\n          try {\n            await window.webln.enable();\n            const result = await window.webln.sendPayment(invoice);\n            setPreimage(result.preimage);\n            setStatus('success');\n            onSuccess?.(result.preimage);\n          } catch (weblnError) {\n            console.error('WebLN payment failed:', weblnError);\n            throw new Error('WebLN payment failed. Please try again.');\n          }\n        } else {\n          throw new Error('Your browser extension does not support WebLN for payments');\n        }\n      } else {\n        throw new Error('No compatible payment method detected');\n      }\n    } catch (err) {\n      console.error('Payment failed:', err);\n      setError(err instanceof Error ? err.message : 'Payment failed');\n      setStatus('error');\n      onError?.(err instanceof Error ? err : new Error('Payment failed'));\n    }\n  };\n\n  // Handle cancel\n  const handleCancel = () => {\n    setStatus('idle');\n    setError(null);\n    onCancel?.();\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 max-w-md mx-auto\">\n      <h3 className=\"text-lg font-medium mb-3 text-center dark:text-white\">Lightning Payment</h3>\n      \n      <div className=\"mb-4 text-center\">\n        <p className=\"text-2xl font-bold dark:text-white\">{amount} sats</p>\n        <p className=\"text-gray-600 dark:text-gray-300\">{description}</p>\n      </div>\n      \n      {status === 'error' && (\n        <div className=\"mb-4 p-3 bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-100 rounded\">\n          <p>{error}</p>\n        </div>\n      )}\n      \n      {status === 'success' && (\n        <div className=\"mb-4 p-3 bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-100 rounded\">\n          <p>Payment successful!</p>\n          {preimage && (\n            <details className=\"mt-2\">\n              <summary className=\"cursor-pointer\">Payment Proof</summary>\n              <p className=\"text-xs mt-1 break-all\">{preimage}</p>\n            </details>\n          )}\n        </div>\n      )}\n      \n      <div className=\"space-y-3\">\n        {!walletConnected && status !== 'success' ? (\n          <button \n            onClick={connectWallet}\n            disabled={status === 'connecting'}\n            className=\"w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md text-sm font-medium flex items-center justify-center disabled:opacity-50\"\n          >\n            {status === 'connecting' ? (\n              <>\n                <span className=\"mr-2 animate-spin\">⚡</span>\n                Connecting...\n              </>\n            ) : (\n              <>\n                <span className=\"mr-2\">⚡</span>\n                Connect Wallet\n              </>\n            )}\n          </button>\n        ) : status !== 'success' ? (\n          <button \n            onClick={processPayment}\n            disabled={status === 'paying'}\n            className=\"w-full px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md text-sm font-medium flex items-center justify-center disabled:opacity-50\"\n          >\n            {status === 'paying' ? (\n              <>\n                <span className=\"mr-2 animate-spin\">⚡</span>\n                Paying...\n              </>\n            ) : (\n              <>\n                <span className=\"mr-2\">⚡</span>\n                Pay with Nostr\n              </>\n            )}\n          </button>\n        ) : null}\n        \n        {(status === 'idle' || status === 'error') && (\n          <button \n            onClick={handleCancel}\n            className=\"w-full px-4 py-2 bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-white rounded-md text-sm font-medium\"\n          >\n            Cancel\n          </button>\n        )}\n        \n        {status === 'success' && (\n          <button \n            onClick={() => {\n              setStatus('idle');\n              setPreimage(null);\n            }}\n            className=\"w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md text-sm font-medium\"\n          >\n            Done\n          </button>\n        )}\n      </div>\n      \n      <div className=\"mt-4 text-xs text-gray-500 dark:text-gray-400 text-center\">\n        Powered by Nostr + Lightning\n      </div>\n    </div>\n  );\n}; ","'use client';\n\nimport React, { useState } from 'react';\nimport { useNostr } from '@/lib/contexts/NostrContext';\nimport { NostrPayment } from '@/components/NostrPayment';\n\nexport default function PaymentExamplePage() {\n  const { user, loginMethod } = useNostr();\n  const [invoice, setInvoice] = useState<string>('');\n  const [amount, setAmount] = useState<string>('1000');\n  const [description, setDescription] = useState<string>('Test Payment');\n  const [showPayment, setShowPayment] = useState<boolean>(false);\n  const [paymentResult, setPaymentResult] = useState<string | null>(null);\n  \n  // Handle success\n  const handlePaymentSuccess = (preimage: string) => {\n    console.log('Payment successful with preimage:', preimage);\n    setPaymentResult(`Payment successful! Preimage: ${preimage.substring(0, 8)}...`);\n    // In a real application, you would update the order status or redirect to a success page\n  };\n  \n  // Handle error\n  const handlePaymentError = (error: Error) => {\n    console.error('Payment failed:', error);\n    setPaymentResult(`Payment failed: ${error.message}`);\n    // In a real application, you might want to show a retry option or alternative payment method\n  };\n  \n  // Handle cancel\n  const handlePaymentCancel = () => {\n    console.log('Payment cancelled');\n    setShowPayment(false);\n    // In a real application, you might want to return to the checkout page\n  };\n  \n  // Generate a demo Lightning invoice\n  const generateDemoInvoice = () => {\n    // This is a fake invoice for demonstration purposes\n    // In a real application, you would use a Lightning service to generate a real invoice\n    const fakeInvoice = 'lnbc10m1pvjluezpp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqdpl2pkx2ctnv5sxxmmwwd5kgetjypeh2ursdae8g6twvus8g6rfwvs8qun0dfjkxaqnqsfcq0d4jq3n3q0jaunt4qz7zs0gyaqyfz8yrtfd6cm9a3t3kxzwfjuj3hxxecpda9qxdhp8p0nyumz2vzjzle60e4g9ekrdffr9znscdhvugz';\n    setInvoice(fakeInvoice);\n    return fakeInvoice;\n  };\n  \n  // Start payment process\n  const startPayment = () => {\n    // Generate an invoice if one doesn't exist\n    const currentInvoice = invoice || generateDemoInvoice();\n    setShowPayment(true);\n    setPaymentResult(null);\n  };\n  \n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-2xl font-bold mb-6\">Nostr Payment Example</h1>\n      \n      {!user ? (\n        <div className=\"bg-yellow-100 dark:bg-yellow-900 border border-yellow-400 dark:border-yellow-700 text-yellow-800 dark:text-yellow-100 p-4 rounded mb-6\">\n          <p className=\"font-medium\">Please log in to test the payment functionality.</p>\n          <p className=\"text-sm mt-2\">Use the Nostr login button in the bottom right corner.</p>\n        </div>\n      ) : loginMethod === 'viewonly' ? (\n        <div className=\"bg-yellow-100 dark:bg-yellow-900 border border-yellow-400 dark:border-yellow-700 text-yellow-800 dark:text-yellow-100 p-4 rounded mb-6\">\n          <p className=\"font-medium\">You are in view-only mode.</p>\n          <p className=\"text-sm mt-2\">Please log in with a NIP-07 extension or NIP-47 remote signer to test payments.</p>\n        </div>\n      ) : (\n        <div className=\"bg-green-100 dark:bg-green-900 border border-green-400 dark:border-green-700 text-green-800 dark:text-green-100 p-4 rounded mb-6\">\n          <p className=\"font-medium\">You are logged in with {loginMethod === 'nip07' ? 'a browser extension' : 'a remote signer'}.</p>\n          <p className=\"text-sm mt-2\">You can now test the payment functionality.</p>\n        </div>\n      )}\n      \n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6\">\n        <h2 className=\"text-xl font-semibold mb-4\">Payment Configuration</h2>\n        \n        <div className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"amount\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n              Amount (sats)\n            </label>\n            <input\n              type=\"number\"\n              id=\"amount\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n              className=\"block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white sm:text-sm\"\n              placeholder=\"Enter amount in satoshis\"\n            />\n          </div>\n          \n          <div>\n            <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n              Description\n            </label>\n            <input\n              type=\"text\"\n              id=\"description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              className=\"block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white sm:text-sm\"\n              placeholder=\"Enter payment description\"\n            />\n          </div>\n          \n          <div>\n            <label htmlFor=\"invoice\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n              Lightning Invoice (optional)\n            </label>\n            <textarea\n              id=\"invoice\"\n              value={invoice}\n              onChange={(e) => setInvoice(e.target.value)}\n              rows={3}\n              className=\"block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white sm:text-sm\"\n              placeholder=\"Enter a Lightning invoice or leave empty to generate a demo one\"\n            />\n            <p className=\"mt-1 text-xs text-gray-500 dark:text-gray-400\">\n              If left empty, a fake invoice will be generated for demonstration.\n            </p>\n          </div>\n          \n          <div>\n            <button\n              onClick={startPayment}\n              disabled={!user || loginMethod === 'viewonly'}\n              className=\"w-full px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              Start Payment Demo\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {paymentResult && (\n        <div className={`mb-6 p-4 rounded ${paymentResult.includes('failed') ? 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-100' : 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-100'}`}>\n          <p>{paymentResult}</p>\n        </div>\n      )}\n      \n      {showPayment && (\n        <div className=\"mt-8\">\n          <NostrPayment\n            invoice={invoice}\n            amount={amount}\n            description={description}\n            onSuccess={handlePaymentSuccess}\n            onError={handlePaymentError}\n            onCancel={handlePaymentCancel}\n          />\n        </div>\n      )}\n      \n      <div className=\"mt-8 bg-gray-100 dark:bg-gray-700 p-4 rounded-lg\">\n        <h3 className=\"text-lg font-medium mb-2\">How It Works</h3>\n        <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-2\">\n          This example demonstrates how to integrate Nostr-based Lightning payments into your application:\n        </p>\n        <ol className=\"list-decimal list-inside text-sm text-gray-600 dark:text-gray-300 space-y-1 ml-2\">\n          <li>User logs in with a Nostr wallet (NIP-07 extension or NIP-47 remote signer)</li>\n          <li>Application generates a Lightning invoice</li>\n          <li>Payment component connects to the user's wallet</li>\n          <li>User confirms the payment in their wallet</li>\n          <li>Application verifies the payment and updates the UI</li>\n        </ol>\n        <p className=\"text-sm text-gray-600 dark:text-gray-300 mt-4\">\n          In a real application, you would integrate with a Lightning service to generate valid invoices and verify payments.\n        </p>\n      </div>\n    </div>\n  );\n} "],"names":["PaymentService","connect","remoteUrl","relayUrl","disconnect","client","NIP47Client","setupPaymentResponseSubscription","console","log","error","ndk","remotePubkey","getPublicKey","paymentSubscription","subscribe","filter","kinds","closeOnEose","on","event","rawEvent","kind","response","processPaymentResponse","id","pendingPayments","has","pendingPayment","get","reject","message","result","resolve","delete","isConnected","getWalletInfo","getInfo","getBalance","Error","payInvoice","invoice","processPaymentEvent","createPaymentRequestEvent","paymentPromise","Promise","set","setTimeout","ndkEvent","NDKEvent","tags","content","created_at","Math","floor","Date","now","publish","stop","constructor","Map","paymentServiceInstance","getPaymentService","NostrPayment","amount","description","onSuccess","onError","onCancel","user","loginMethod","useNostr","status","setStatus","useState","setError","preimage","setPreimage","walletConnected","setWalletConnected","isNip47","useEffect","connectWallet","err","processPayment","paymentService","window","webln","enable","sendPayment","weblnError","div","className","h3","p","details","summary","button","onClick","disabled","span","handleCancel","PaymentExamplePage","setInvoice","setAmount","setDescription","showPayment","setShowPayment","paymentResult","setPaymentResult","generateDemoInvoice","fakeInvoice","h1","h2","label","htmlFor","input","type","value","onChange","e","target","placeholder","textarea","rows","startPayment","includes","handlePaymentSuccess","substring","handlePaymentError","handlePaymentCancel","ol","li"],"sourceRoot":"","ignoreList":[]}
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/community/page",{

/***/ "(app-pages-browser)/./src/lib/contexts/NostrContext.tsx":
/*!*******************************************!*\
  !*** ./src/lib/contexts/NostrContext.tsx ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NostrProvider: () => (/* binding */ NostrProvider),\n/* harmony export */   PREDEFINED_PROFILES: () => (/* binding */ PREDEFINED_PROFILES),\n/* harmony export */   shortenNpub: () => (/* binding */ shortenNpub),\n/* harmony export */   useNostr: () => (/* binding */ useNostr)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @nostr-dev-kit/ndk */ \"(app-pages-browser)/./node_modules/@nostr-dev-kit/ndk/dist/index.mjs\");\n/* harmony import */ var nostr_tools__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! nostr-tools */ \"(app-pages-browser)/./node_modules/nostr-tools/lib/esm/index.js\");\n/* harmony import */ var _lib_nostr_nip47__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/nostr/nip47 */ \"(app-pages-browser)/./src/lib/nostr/nip47.ts\");\n/* harmony import */ var _lib_nostr_nip47_payments__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/nostr/nip47-payments */ \"(app-pages-browser)/./src/lib/nostr/nip47-payments.ts\");\n/* __next_internal_client_entry_do_not_use__ shortenNpub,PREDEFINED_PROFILES,NostrProvider,useNostr auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n\n// Utility function to shorten npub for display\nconst shortenNpub = (npub)=>{\n    if (!npub) return '';\n    return \"\".concat(npub.substring(0, 8), \"...\").concat(npub.substring(npub.length - 4));\n};\n// List of predefined profiles for view only mode\nconst PREDEFINED_PROFILES = [\n    {\n        // MadTrips official profile\n        pubkey: '9a0a16254ff0dd29bbe45aeea9b8d80c0b9537d879a93f2589bbacedc4db166e',\n        npub: 'npub14jrvanj69ulfxc92pqsunvv220xhwtn6pukpmgpqzg6xl6wmaflqnx6nvs',\n        name: 'MadTrips_Official',\n        displayName: 'MadTrips (View Only)',\n        picture: '/assets/nostr-icon-purple-transparent-256x256.png'\n    }\n];\n// Create the context\nconst NostrContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n// Provider component\nconst NostrProvider = (param)=>{\n    let { children } = param;\n    _s();\n    const [ndk, setNdk] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loginMethod, setLoginMethod] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [viewOnlyProfile, setViewOnlyProfile] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [nip47Client, setNip47Client] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [paymentClient, setPaymentClient] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [canMakePayments, setCanMakePayments] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Initialize NDK on component mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"NostrProvider.useEffect\": ()=>{\n            const initializeNDK = {\n                \"NostrProvider.useEffect.initializeNDK\": async ()=>{\n                    try {\n                        // Check if window is defined (only in browser)\n                        if (true) {\n                            // Create a new NDK instance without a signer initially\n                            const ndk = new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                                explicitRelayUrls: [\n                                    'wss://relay.damus.io',\n                                    'wss://relay.nostr.band',\n                                    'wss://nos.lol',\n                                    'wss://relay.current.fyi',\n                                    'wss://relay.snort.social'\n                                ]\n                            });\n                            // Connect to relays\n                            await ndk.connect();\n                            setNdk(ndk);\n                            console.log('NDK initialized without signer');\n                            setLoading(false);\n                        }\n                    } catch (e) {\n                        console.error('Failed to initialize NDK:', e);\n                        setError(e);\n                        setLoading(false);\n                    }\n                }\n            }[\"NostrProvider.useEffect.initializeNDK\"];\n            initializeNDK();\n        }\n    }[\"NostrProvider.useEffect\"], []);\n    // Login function that handles different methods\n    const login = async (method, options)=>{\n        if (!ndk) {\n            throw new Error('NDK not initialized');\n        }\n        setLoading(true);\n        setError(null);\n        try {\n            switch(method){\n                case 'nip07':\n                    {\n                        // Browser extension login (NIP-07)\n                        if ( false || !window.nostr) {\n                            throw new Error('No NIP-07 compatible browser extension found');\n                        }\n                        // Create a signer that uses the window.nostr API (extension)\n                        ndk.signer = new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKNip07Signer();\n                        // Get the user's public key\n                        const publicKey = await ndk.signer.user();\n                        if (!publicKey) {\n                            throw new Error('Failed to get public key from extension');\n                        }\n                        // Create an NDKUser from the public key\n                        const user = ndk.getUser({\n                            npub: publicKey.npub\n                        });\n                        // Fetch the user's profile\n                        await user.fetchProfile();\n                        setUser(user);\n                        setLoginMethod('nip07');\n                        setViewOnlyProfile(null);\n                        console.log('NIP-07 login successful:', user.npub);\n                        setCanMakePayments(false); // NIP-07 can't make payments by default\n                        break;\n                    }\n                case 'nip47':\n                    {\n                        // Remote signer login (NIP-47)\n                        if (!options || !options.target) {\n                            throw new Error('NIP-47 connection requires a target URL');\n                        }\n                        console.log('NIP-47 login requested to:', options.target);\n                        // For future implementation, we've created a NIP-47 client in @/lib/nostr/nip47.ts\n                        // but are providing a simplified implementation here for now\n                        try {\n                            // For demo purposes, we'll create a read-only profile from the target\n                            let npub = options.target;\n                            // If the target is a nostrconnect:// URL, extract the npub\n                            if (npub.startsWith('nostrconnect://')) {\n                                const url = new URL(npub);\n                                npub = url.pathname.substring(1); // Remove leading slash\n                                if (npub.startsWith('npub1')) {\n                                // Use as is\n                                } else {\n                                    // Convert hex to npub if needed\n                                    npub = nostr_tools__WEBPACK_IMPORTED_MODULE_5__.nip19.npubEncode(npub);\n                                }\n                            } else if (!npub.startsWith('npub1')) {\n                                // If it's a hex key, convert to npub\n                                npub = nostr_tools__WEBPACK_IMPORTED_MODULE_5__.nip19.npubEncode(npub);\n                            }\n                            // Create an NDKUser from the pubkey\n                            const user = ndk.getUser({\n                                npub\n                            });\n                            // Create NIP-47 client\n                            const client = new _lib_nostr_nip47__WEBPACK_IMPORTED_MODULE_3__.NIP47Client(options.target);\n                            // Connect to the remote signer\n                            await client.connect();\n                            // Get the public key\n                            const remotePubkey = await client.getPublicKey();\n                            // Create the payment client\n                            const payments = new _lib_nostr_nip47_payments__WEBPACK_IMPORTED_MODULE_4__.NIP47PaymentClient(client);\n                            // Check if payments are supported\n                            const paymentStatus = await payments.checkPaymentCapability();\n                            // Store the clients for later use\n                            setNip47Client(client);\n                            setPaymentClient(payments);\n                            setCanMakePayments(paymentStatus.canPay);\n                            // Attempt to fetch profile data\n                            try {\n                                await user.fetchProfile();\n                            } catch (e) {\n                                console.warn('Could not fetch profile for remote signer:', e);\n                            }\n                            setUser(user);\n                            setLoginMethod('nip47');\n                            setViewOnlyProfile(null);\n                            console.log('NIP-47 login successful:', user.npub);\n                            console.log('Payment capability:', paymentStatus.canPay ? 'Enabled' : 'Disabled');\n                            if (!paymentStatus.canPay) {\n                                console.warn('Payment not available:', paymentStatus.reason);\n                            }\n                        } catch (error) {\n                            console.error('NIP-47 login error:', error);\n                            throw new Error(\"NIP-47 login failed: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n                        }\n                        break;\n                    }\n                case 'viewonly':\n                    {\n                        // View-only login with a predefined profile\n                        if (!options || !options.profile) {\n                            throw new Error('View-only login requires a profile');\n                        }\n                        const profile = options.profile;\n                        // Create an NDKUser from the public key\n                        const user = ndk.getUser({\n                            npub: profile.npub\n                        });\n                        // For view-only, we can still fetch their profile data\n                        try {\n                            await user.fetchProfile();\n                        } catch (e) {\n                            console.warn('Could not fetch profile for view-only user, using predefined data');\n                            // Use the predefined profile data\n                            user.profile = {\n                                name: profile.name,\n                                displayName: profile.displayName,\n                                image: profile.picture\n                            };\n                        }\n                        setUser(user);\n                        setLoginMethod('viewonly');\n                        setViewOnlyProfile(profile);\n                        console.log('View-only login successful:', profile.npub);\n                        setNip47Client(null);\n                        setPaymentClient(null);\n                        setCanMakePayments(false);\n                        break;\n                    }\n                default:\n                    throw new Error(\"Unsupported login method: \".concat(method));\n            }\n        } catch (e) {\n            console.error(\"Login error (\".concat(method, \"):\"), e);\n            setError(e);\n            throw e;\n        } finally{\n            setLoading(false);\n        }\n    };\n    // Enhanced logout function\n    const logout = ()=>{\n        console.log('NostrContext: Logout initiated');\n        // Clean up any active subscriptions or resources if needed\n        if (ndk) {\n            try {\n                // If we have a signer, we should reset it\n                if (ndk.signer) {\n                    console.log('Resetting NDK signer');\n                    ndk.signer = undefined;\n                }\n                console.log('User resources cleaned up');\n            } catch (error) {\n                console.error('Error during logout cleanup:', error);\n            }\n        }\n        // Clean up NIP-47 client if it exists\n        if (nip47Client) {\n            try {\n                nip47Client.disconnect();\n            } catch (e) {\n                console.error('Error disconnecting NIP-47 client:', e);\n            }\n            setNip47Client(null);\n        }\n        // Clean up payment client\n        setPaymentClient(null);\n        setCanMakePayments(false);\n        // Reset all state\n        setLoginMethod(null);\n        setViewOnlyProfile(null);\n        setUser(null);\n        setError(null);\n        setLoading(false);\n        console.log('NostrContext: Logout completed');\n    };\n    // Get a user's profile\n    const getUserProfile = async (npub)=>{\n        if (!ndk) {\n            throw new Error('NDK not initialized');\n        }\n        const user = ndk.getUser({\n            npub\n        });\n        await user.fetchProfile();\n        return user;\n    };\n    // Get users that a user follows\n    const getFollows = async (npub)=>{\n        if (!ndk) {\n            throw new Error('NDK not initialized');\n        }\n        const user = ndk.getUser({\n            npub\n        });\n        const follows = await user.follows();\n        return Array.from(follows).map((follow)=>follow.npub);\n    };\n    // Pay a Lightning invoice\n    const payInvoice = async (invoice)=>{\n        if (!paymentClient) {\n            throw new Error('Payment client not initialized');\n        }\n        if (!canMakePayments) {\n            throw new Error('Payments not supported with current login method');\n        }\n        try {\n            const response = await paymentClient.payInvoice(invoice);\n            if (response.error) {\n                throw new Error(\"Payment failed: \".concat(response.error.message));\n            }\n            return response.result;\n        } catch (error) {\n            console.error('Payment failed:', error);\n            throw error;\n        }\n    };\n    // Generate social graph data for the provided NPUBs\n    const getSocialGraph = async function(npubs) {\n        let maxConnections = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 25;\n        var _ndk_pool;\n        if (!ndk) {\n            throw new Error('NDK not initialized');\n        }\n        // Check relay connections\n        const connectedRelays = ((_ndk_pool = ndk.pool) === null || _ndk_pool === void 0 ? void 0 : _ndk_pool.getConnectedRelays()) || [];\n        if (connectedRelays.length === 0) {\n            console.warn('No connected relays. Attempting to connect...');\n            try {\n                var _ndk_pool1;\n                // Attempt to reconnect\n                await ndk.connect();\n                // Check again\n                const reconnectedRelays = ((_ndk_pool1 = ndk.pool) === null || _ndk_pool1 === void 0 ? void 0 : _ndk_pool1.getConnectedRelays()) || [];\n                if (reconnectedRelays.length === 0) {\n                    throw new Error('Failed to connect to any relays');\n                }\n                console.log(\"Successfully connected to \".concat(reconnectedRelays.length, \" relays\"));\n            } catch (error) {\n                console.error('Relay connection error:', error);\n                throw new Error('Failed to connect to Nostr relays. Please check your internet connection.');\n            }\n        }\n        console.log(\"Fetching social graph for \".concat(npubs.length, \" NPUBs with max \").concat(maxConnections, \" connections from \").concat(connectedRelays.length, \" relays\"));\n        // Real implementation using actual Nostr data\n        const nodes = [];\n        const links = [];\n        const nodeMap = new Map();\n        // Create a timeout promise\n        const timeout = (ms)=>new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Operation timed out after \".concat(ms, \"ms\"))), ms));\n        // Add the core NPUBs as nodes\n        for (const npub of npubs){\n            if (nodeMap.has(npub)) continue;\n            try {\n                var _user_profile, _user_profile1, _user_profile2, _user_profile3;\n                // Get the actual user profile from Nostr with timeout\n                const user = ndk.getUser({\n                    npub\n                });\n                // Set timeout for profile fetching to avoid hanging\n                const profilePromise = user.fetchProfile();\n                await Promise.race([\n                    profilePromise,\n                    timeout(10000) // 10 second timeout\n                ]);\n                console.log(\"Fetched profile for \".concat(npub, \": \").concat(((_user_profile = user.profile) === null || _user_profile === void 0 ? void 0 : _user_profile.name) || 'unnamed'));\n                nodes.push({\n                    id: npub,\n                    npub,\n                    name: ((_user_profile1 = user.profile) === null || _user_profile1 === void 0 ? void 0 : _user_profile1.displayName) || ((_user_profile2 = user.profile) === null || _user_profile2 === void 0 ? void 0 : _user_profile2.name) || shortenNpub(npub),\n                    type: 'profile',\n                    picture: ((_user_profile3 = user.profile) === null || _user_profile3 === void 0 ? void 0 : _user_profile3.picture) || '',\n                    isCoreNode: true,\n                    val: 10,\n                    group: 1\n                });\n                nodeMap.set(npub, true);\n            } catch (e) {\n                console.error(\"Failed to fetch profile for \".concat(npub), e);\n                // Still add the node even if profile fetch fails\n                nodes.push({\n                    id: npub,\n                    npub,\n                    name: shortenNpub(npub),\n                    type: 'profile',\n                    isCoreNode: true,\n                    val: 10,\n                    group: 1\n                });\n                nodeMap.set(npub, true);\n            }\n        }\n        // Fetch real follows for each core NPUB\n        for (const npub of npubs){\n            try {\n                // Get the actual follows from Nostr with timeout\n                const user = ndk.getUser({\n                    npub\n                });\n                // Set timeout for follows fetching to avoid hanging\n                const followsPromise = user.follows();\n                const follows = await Promise.race([\n                    followsPromise,\n                    timeout(15000) // 15 second timeout\n                ]);\n                console.log(\"Fetched \".concat(follows.size, \" follows for \").concat(npub));\n                // Limit to maxConnections if needed\n                const followsList = Array.from(follows).slice(0, maxConnections);\n                // Process each follow\n                for (const followedUser of followsList){\n                    const followedNpub = followedUser.npub;\n                    // Skip if already processed\n                    if (nodeMap.has(followedNpub)) {\n                        // Still add connection if not already added\n                        links.push({\n                            source: npub,\n                            target: followedNpub,\n                            type: 'follows',\n                            value: 1\n                        });\n                        continue;\n                    }\n                    // Try to get profile information for the followed user\n                    try {\n                        var _followedUser_profile, _followedUser_profile1, _followedUser_profile2;\n                        // Set timeout for profile fetching\n                        const profilePromise = followedUser.fetchProfile();\n                        await Promise.race([\n                            profilePromise,\n                            timeout(5000) // 5 second timeout for follows' profiles\n                        ]);\n                        nodes.push({\n                            id: followedNpub,\n                            npub: followedNpub,\n                            name: ((_followedUser_profile = followedUser.profile) === null || _followedUser_profile === void 0 ? void 0 : _followedUser_profile.displayName) || ((_followedUser_profile1 = followedUser.profile) === null || _followedUser_profile1 === void 0 ? void 0 : _followedUser_profile1.name) || shortenNpub(followedNpub),\n                            type: 'connection',\n                            picture: ((_followedUser_profile2 = followedUser.profile) === null || _followedUser_profile2 === void 0 ? void 0 : _followedUser_profile2.picture) || '',\n                            isCoreNode: false,\n                            val: 3,\n                            group: 2\n                        });\n                    } catch (e) {\n                        console.warn(\"Failed to fetch profile for follow \".concat(followedNpub), e);\n                        nodes.push({\n                            id: followedNpub,\n                            npub: followedNpub,\n                            name: shortenNpub(followedNpub),\n                            type: 'connection',\n                            isCoreNode: false,\n                            val: 3,\n                            group: 2\n                        });\n                    }\n                    nodeMap.set(followedNpub, true);\n                    // Add connection\n                    links.push({\n                        source: npub,\n                        target: followedNpub,\n                        type: 'follows',\n                        value: 1\n                    });\n                }\n                // Check for mutual follows between core NPUBs (real connections)\n                const followedPubkeys = new Set(followsList.map((f)=>f.npub));\n                // For each other core NPUB, check if this NPUB follows it\n                for (const otherNpub of npubs){\n                    if (otherNpub !== npub && followedPubkeys.has(otherNpub)) {\n                        links.push({\n                            source: npub,\n                            target: otherNpub,\n                            type: 'mutual',\n                            value: 2\n                        });\n                    }\n                }\n            } catch (e) {\n                console.error(\"Failed to fetch follows for \".concat(npub), e);\n            }\n        }\n        console.log(\"Completed social graph with \".concat(nodes.length, \" nodes and \").concat(links.length, \" links\"));\n        return {\n            nodes,\n            links\n        };\n    };\n    // Provide the context value\n    const contextValue = {\n        ndk,\n        user,\n        loading,\n        error,\n        loginMethod,\n        viewOnlyProfile,\n        availableProfiles: PREDEFINED_PROFILES,\n        login,\n        logout,\n        getUserProfile,\n        getFollows,\n        shortenNpub,\n        payInvoice: canMakePayments ? payInvoice : undefined,\n        canMakePayments,\n        getSocialGraph\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(NostrContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"/home/lfg/Git/Madtrips/src/lib/contexts/NostrContext.tsx\",\n        lineNumber: 563,\n        columnNumber: 5\n    }, undefined);\n};\n_s(NostrProvider, \"XXmHTZ3akXfpNIfxEerd+v4DDso=\");\n_c = NostrProvider;\n// Hook to use the Nostr context\nconst useNostr = ()=>{\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(NostrContext);\n    if (context === undefined) {\n        throw new Error('useNostr must be used within a NostrProvider');\n    }\n    return context;\n};\n_s1(useNostr, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"NostrProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/contexts/NostrContext.tsx\n"));

/***/ })

});
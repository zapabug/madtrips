"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/community/page",{

/***/ "(app-pages-browser)/./src/lib/nostr/NostrAuthProvider.tsx":
/*!*********************************************!*\
  !*** ./src/lib/nostr/NostrAuthProvider.tsx ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NostrAuthProvider: () => (/* binding */ NostrAuthProvider),\n/* harmony export */   TrustLevel: () => (/* binding */ TrustLevel),\n/* harmony export */   useNostrAuth: () => (/* binding */ useNostrAuth)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @nostr-dev-kit/ndk */ \"(app-pages-browser)/./node_modules/@nostr-dev-kit/ndk/dist/index.mjs\");\n/* harmony import */ var _nostr_dev_kit_ndk_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @nostr-dev-kit/ndk-react */ \"(app-pages-browser)/./node_modules/@nostr-dev-kit/ndk-react/dist/ndk-react.es.js\");\n/* harmony import */ var nostr_tools__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! nostr-tools */ \"(app-pages-browser)/./node_modules/nostr-tools/lib/esm/index.js\");\n/* __next_internal_client_entry_do_not_use__ TrustLevel,useNostrAuth,NostrAuthProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n// Define the trust level enum\nvar TrustLevel = /*#__PURE__*/ function(TrustLevel) {\n    TrustLevel[TrustLevel[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    TrustLevel[TrustLevel[\"LOW\"] = 1] = \"LOW\";\n    TrustLevel[TrustLevel[\"MEDIUM\"] = 2] = \"MEDIUM\";\n    TrustLevel[TrustLevel[\"HIGH\"] = 3] = \"HIGH\";\n    TrustLevel[TrustLevel[\"VERIFIED\"] = 4] = \"VERIFIED\";\n    return TrustLevel;\n}({});\n// Define core NPUBs to check for trust\nconst CORE_NPUBS = [\n    \"npub1etgqcj9gc6yaxttuwu9eqgs3ynt2dzaudvwnrssrn2zdt2useaasfj8n6e\",\n    \"npub1s0veng2gvfwr62acrxhnqexq76sj6ldg3a5t935jy8e6w3shr5vsnwrmq5\",\n    \"npub1dxd02kcjhgpkyrx60qnkd6j42kmc72u5lum0rp2ud8x5zfhnk4zscjj6hh\",\n    \"npub1funchalx8v747rsee6ahsuyrcd2s3rnxlyrtumfex9lecpmgwars6hq8kc\"\n];\n// Define a list of community relays\nconst COMMUNITY_RELAYS = [\n    \"wss://relay.damus.io\",\n    \"wss://relay.nostr.band\",\n    \"wss://nos.lol\",\n    \"wss://nostr.mutinywallet.com\"\n];\n// Create the context\nconst NostrAuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\n// Custom hook for accessing the context\nconst useNostrAuth = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(NostrAuthContext);\n    if (!context) {\n        throw new Error('useNostrAuth must be used within a NostrAuthProvider');\n    }\n    return context;\n};\n_s(useNostrAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n// The provider component\nconst NostrAuthProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    // NDK instance from the NDK provider\n    const { ndk } = (0,_nostr_dev_kit_ndk_react__WEBPACK_IMPORTED_MODULE_3__.useNDK)();\n    // State for authentication status\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [npub, setNpub] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [pubkey, setPubkey] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isConnected, setIsConnected] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Reference to the connect manager - we'll create our own minimal implementation\n    const [connectManager, setConnectManager] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Initialize NostrConnect - simplified for this implementation\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"NostrAuthProvider.useEffect\": ()=>{\n            if (!ndk) return;\n            try {\n                // Instead of using the Connect class which has compatibility issues,\n                // we'll create a minimal manager object for testing purposes\n                const minimalManager = {\n                    connect: {\n                        \"NostrAuthProvider.useEffect\": async ()=>{\n                            // Simulate connection by returning a random core NPUB\n                            const mockPubkey = CORE_NPUBS[Math.floor(Math.random() * CORE_NPUBS.length)];\n                            const { data: hexPubkey } = nostr_tools__WEBPACK_IMPORTED_MODULE_4__.nip19.decode(mockPubkey);\n                            return {\n                                pubkey: hexPubkey,\n                                secretKey: 'mock_secret'\n                            };\n                        }\n                    }[\"NostrAuthProvider.useEffect\"]\n                };\n                setConnectManager(minimalManager);\n                // Try to restore session\n                const restoreSession = {\n                    \"NostrAuthProvider.useEffect.restoreSession\": async ()=>{\n                        try {\n                            const session = localStorage.getItem('nostrSession');\n                            if (session) {\n                                const sessionData = JSON.parse(session);\n                                if (sessionData && sessionData.pubkey && sessionData.npub) {\n                                    setPubkey(sessionData.pubkey);\n                                    setNpub(sessionData.npub);\n                                    setIsConnected(true);\n                                    // Create user object\n                                    const userObj = {\n                                        pubkey: sessionData.pubkey,\n                                        npub: sessionData.npub,\n                                        name: sessionData.name || '',\n                                        profileImage: sessionData.profileImage || ''\n                                    };\n                                    setUser(userObj);\n                                    // Load the user profile\n                                    await loadUserProfile(sessionData.npub);\n                                }\n                            }\n                        } catch (err) {\n                            console.error('Error restoring session:', err);\n                            localStorage.removeItem('nostrSession');\n                        }\n                    }\n                }[\"NostrAuthProvider.useEffect.restoreSession\"];\n                restoreSession();\n            } catch (err) {\n                console.error('Error initializing Nostr:', err);\n                setError('Failed to initialize Nostr connection');\n            }\n        }\n    }[\"NostrAuthProvider.useEffect\"], [\n        ndk\n    ]);\n    // Function to load user profile data\n    const loadUserProfile = async (userNpub)=>{\n        if (!ndk) return;\n        try {\n            var _user_profile, _user_profile1, _user_profile2, _user_profile3;\n            // Create an NDK user from the npub\n            const { type, data: hexPubkey } = nostr_tools__WEBPACK_IMPORTED_MODULE_4__.nip19.decode(userNpub);\n            if (type !== 'npub') {\n                throw new Error('Invalid npub');\n            }\n            // Fetch user profile\n            const user = ndk.getUser({\n                pubkey: hexPubkey\n            });\n            await user.fetchProfile();\n            // Update user data\n            setUser({\n                pubkey: hexPubkey,\n                npub: userNpub,\n                name: ((_user_profile = user.profile) === null || _user_profile === void 0 ? void 0 : _user_profile.name) || '',\n                profileImage: ((_user_profile1 = user.profile) === null || _user_profile1 === void 0 ? void 0 : _user_profile1.image) || ''\n            });\n            // Save to local storage\n            const sessionData = {\n                pubkey: hexPubkey,\n                npub: userNpub,\n                name: ((_user_profile2 = user.profile) === null || _user_profile2 === void 0 ? void 0 : _user_profile2.name) || '',\n                profileImage: ((_user_profile3 = user.profile) === null || _user_profile3 === void 0 ? void 0 : _user_profile3.image) || ''\n            };\n            localStorage.setItem('nostrSession', JSON.stringify(sessionData));\n        } catch (err) {\n            console.error('Error loading user profile:', err);\n        }\n    };\n    // Login function\n    const login = async ()=>{\n        if (!ndk || !connectManager) {\n            setError('Nostr connection not initialized');\n            return;\n        }\n        setIsLoading(true);\n        setError(null);\n        try {\n            // First try NIP-07 login if available\n            try {\n                // Check if the browser has a NIP-07 extension\n                const hasNip07 = window && 'nostr' in window;\n                if (hasNip07) {\n                    // Use the NIP-07 signer\n                    const signer = new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKNip07Signer();\n                    ndk.signer = signer;\n                    // Get the user's public key\n                    const userPubkey = await signer.user();\n                    if (userPubkey) {\n                        const userNpub = nostr_tools__WEBPACK_IMPORTED_MODULE_4__.nip19.npubEncode(userPubkey.pubkey);\n                        setPubkey(userPubkey.pubkey);\n                        setNpub(userNpub);\n                        setIsConnected(true);\n                        await loadUserProfile(userNpub);\n                        return;\n                    }\n                }\n            } catch (err) {\n                console.log('NIP-07 login failed, falling back to our minimal connect implementation:', err);\n            }\n            // Fall back to our minimal connect implementation\n            const { pubkey: hexPubkey } = await connectManager.connect();\n            // Convert to npub\n            const mockPubkey = nostr_tools__WEBPACK_IMPORTED_MODULE_4__.nip19.npubEncode(hexPubkey);\n            setPubkey(hexPubkey);\n            setNpub(mockPubkey);\n            setIsConnected(true);\n            // Create a basic user object\n            const userObj = {\n                pubkey: hexPubkey,\n                npub: mockPubkey,\n                name: 'Test User',\n                profileImage: ''\n            };\n            setUser(userObj);\n            // Save to local storage\n            localStorage.setItem('nostrSession', JSON.stringify(userObj));\n        } catch (err) {\n            console.error('Login error:', err);\n            setError('Failed to login with Nostr');\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    // Logout function\n    const logout = ()=>{\n        setUser(null);\n        setNpub(null);\n        setPubkey(null);\n        setIsConnected(false);\n        // Clear local storage\n        localStorage.removeItem('nostrSession');\n    };\n    // Check trust level of a npub\n    const checkTrustLevel = async (targetNpub)=>{\n        if (!ndk || !isConnected) return 0;\n        try {\n            // Check if it's a core npub\n            if (CORE_NPUBS.includes(targetNpub)) {\n                return 4;\n            }\n            // Check if it's directly connected to us\n            const { directConnections } = await getWebOfTrust();\n            if (directConnections.includes(targetNpub)) {\n                return 3;\n            }\n            // Check if it's indirectly connected\n            const { secondDegreeConnections } = await getWebOfTrust();\n            if (secondDegreeConnections.includes(targetNpub)) {\n                return 2;\n            }\n            // Otherwise, it's a low trust connection\n            return 1;\n        } catch (err) {\n            console.error('Error checking trust level:', err);\n            return 0;\n        }\n    };\n    // Publish an event\n    const publishEvent = async (event)=>{\n        if (!ndk || !isConnected) return null;\n        try {\n            const ndkEvent = new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKEvent(ndk);\n            ndkEvent.kind = event.kind;\n            ndkEvent.content = event.content;\n            ndkEvent.tags = event.tags || [];\n            // Publish the event\n            await ndkEvent.publish();\n            return ndkEvent;\n        } catch (err) {\n            console.error('Error publishing event:', err);\n            return null;\n        }\n    };\n    // Get web of trust\n    const getWebOfTrust = async ()=>{\n        if (!ndk || !isConnected || !pubkey) {\n            return {\n                directConnections: [],\n                secondDegreeConnections: [],\n                coreFollowers: []\n            };\n        }\n        try {\n            // For simplicity, we'll use a mock implementation\n            // In a real implementation, this would query the relays for follows\n            // Mock direct connections\n            const directConnections = CORE_NPUBS.filter(()=>Math.random() > 0.5);\n            // Mock second-degree connections\n            const secondDegreeConnections = CORE_NPUBS.filter(()=>Math.random() > 0.7);\n            // Mock core followers\n            const coreFollowers = CORE_NPUBS.filter(()=>Math.random() > 0.8);\n            return {\n                directConnections,\n                secondDegreeConnections,\n                coreFollowers\n            };\n        } catch (err) {\n            console.error('Error getting web of trust:', err);\n            return {\n                directConnections: [],\n                secondDegreeConnections: [],\n                coreFollowers: []\n            };\n        }\n    };\n    // Context value\n    const value = {\n        user,\n        npub,\n        pubkey,\n        isConnected,\n        isLoading,\n        error,\n        login,\n        logout,\n        checkTrustLevel,\n        publishEvent,\n        getWebOfTrust\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(NostrAuthContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/home/lfg/Git/Madtrips/src/lib/nostr/NostrAuthProvider.tsx\",\n        lineNumber: 372,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(NostrAuthProvider, \"JC1CBGG50mdECnkG6AfQzMMmKxg=\", false, function() {\n    return [\n        _nostr_dev_kit_ndk_react__WEBPACK_IMPORTED_MODULE_3__.useNDK\n    ];\n});\n_c = NostrAuthProvider;\nvar _c;\n$RefreshReg$(_c, \"NostrAuthProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/nostr/NostrAuthProvider.tsx\n"));

/***/ })

});
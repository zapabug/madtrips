"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/native.js":
/*!******************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/native.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({ randomUUID });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvbmF0aXZlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLGlFQUFlLEVBQUUsWUFBWSxFQUFDIiwic291cmNlcyI6WyIvaG9tZS9sZmcvR2l0L01hZHRyaXBzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvbmF0aXZlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJhbmRvbVVVSUQgPSB0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiBjcnlwdG8ucmFuZG9tVVVJRCAmJiBjcnlwdG8ucmFuZG9tVVVJRC5iaW5kKGNyeXB0byk7XG5leHBvcnQgZGVmYXVsdCB7IHJhbmRvbVVVSUQgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/native.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/regex.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/regex.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcmVnZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWMsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsR0FBRyw4RUFBOEUsRUFBQyIsInNvdXJjZXMiOlsiL2hvbWUvbGZnL0dpdC9NYWR0cmlwcy9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3JlZ2V4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IC9eKD86WzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzEtOF1bMC05YS1mXXszfS1bODlhYl1bMC05YS1mXXszfS1bMC05YS1mXXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwfGZmZmZmZmZmLWZmZmYtZmZmZi1mZmZmLWZmZmZmZmZmZmZmZikkL2k7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/regex.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/rng.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/rng.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rng)\n/* harmony export */ });\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nfunction rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ2U7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9sZmcvR2l0L01hZHRyaXBzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImxldCBnZXRSYW5kb21WYWx1ZXM7XG5jb25zdCBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJuZygpIHtcbiAgICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgICAgICBpZiAodHlwZW9mIGNyeXB0byA9PT0gJ3VuZGVmaW5lZCcgfHwgIWNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY3J5cHRvLmdldFJhbmRvbVZhbHVlcygpIG5vdCBzdXBwb3J0ZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQjZ2V0cmFuZG9tdmFsdWVzLW5vdC1zdXBwb3J0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBnZXRSYW5kb21WYWx1ZXMgPSBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKTtcbiAgICB9XG4gICAgcmV0dXJuIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/rng.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/stringify.js":
/*!*********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/stringify.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   unsafeStringify: () => (/* binding */ unsafeStringify)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/validate.js\");\n\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nfunction unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc3RyaW5naWZ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxQztBQUNyQztBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHdEQUFRO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsU0FBUyxFQUFDIiwic291cmNlcyI6WyIvaG9tZS9sZmcvR2l0L01hZHRyaXBzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc3RyaW5naWZ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbmNvbnN0IGJ5dGVUb0hleCA9IFtdO1xuZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICAgIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zbGljZSgxKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICAgIHJldHVybiAoYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAwXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDFdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMl1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAzXV0gK1xuICAgICAgICAnLScgK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDRdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNV1dICtcbiAgICAgICAgJy0nICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA2XV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDddXSArXG4gICAgICAgICctJyArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOF1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA5XV0gK1xuICAgICAgICAnLScgK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDEwXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDExXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDEyXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDEzXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDE0XV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDE1XV0pLnRvTG93ZXJDYXNlKCk7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnkoYXJyLCBvZmZzZXQgPSAwKSB7XG4gICAgY29uc3QgdXVpZCA9IHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCk7XG4gICAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICAgIH1cbiAgICByZXR1cm4gdXVpZDtcbn1cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ2lmeTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/stringify.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v4.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./native.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/native.js\");\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rng.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/stringify.js\");\n\n\n\nfunction v4(options, buf, offset) {\n    if (_native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID && !buf && !options) {\n        return _native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? (0,_rng_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(rnds);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpQztBQUNOO0FBQ3NCO0FBQ2pEO0FBQ0EsUUFBUSxrREFBTTtBQUNkLGVBQWUsa0RBQU07QUFDckI7QUFDQTtBQUNBLHNEQUFzRCxtREFBRztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELE9BQU8sR0FBRyxhQUFhO0FBQzNFO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDhEQUFlO0FBQzFCO0FBQ0EsaUVBQWUsRUFBRSxFQUFDIiwic291cmNlcyI6WyIvaG9tZS9sZmcvR2l0L01hZHRyaXBzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5hdGl2ZSBmcm9tICcuL25hdGl2ZS5qcyc7XG5pbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCB7IHVuc2FmZVN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgaWYgKG5hdGl2ZS5yYW5kb21VVUlEICYmICFidWYgJiYgIW9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZS5yYW5kb21VVUlEKCk7XG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IHJuZHMgPSBvcHRpb25zLnJhbmRvbSA/PyBvcHRpb25zLnJuZz8uKCkgPz8gcm5nKCk7XG4gICAgaWYgKHJuZHMubGVuZ3RoIDwgMTYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSYW5kb20gYnl0ZXMgbGVuZ3RoIG11c3QgYmUgPj0gMTYnKTtcbiAgICB9XG4gICAgcm5kc1s2XSA9IChybmRzWzZdICYgMHgwZikgfCAweDQwO1xuICAgIHJuZHNbOF0gPSAocm5kc1s4XSAmIDB4M2YpIHwgMHg4MDtcbiAgICBpZiAoYnVmKSB7XG4gICAgICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAxNiA+IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBVVUlEIGJ5dGUgcmFuZ2UgJHtvZmZzZXR9OiR7b2Zmc2V0ICsgMTV9IGlzIG91dCBvZiBidWZmZXIgYm91bmRzYCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICAgICAgICBidWZbb2Zmc2V0ICsgaV0gPSBybmRzW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWY7XG4gICAgfVxuICAgIHJldHVybiB1bnNhZmVTdHJpbmdpZnkocm5kcyk7XG59XG5leHBvcnQgZGVmYXVsdCB2NDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/validate.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/validate.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/regex.js\");\n\nfunction validate(uuid) {\n    return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdmFsaWRhdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0I7QUFDL0I7QUFDQSx1Q0FBdUMsaURBQUs7QUFDNUM7QUFDQSxpRUFBZSxRQUFRLEVBQUMiLCJzb3VyY2VzIjpbIi9ob21lL2xmZy9HaXQvTWFkdHJpcHMvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92YWxpZGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUkVHRVggZnJvbSAnLi9yZWdleC5qcyc7XG5mdW5jdGlvbiB2YWxpZGF0ZSh1dWlkKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyAmJiBSRUdFWC50ZXN0KHV1aWQpO1xufVxuZXhwb3J0IGRlZmF1bHQgdmFsaWRhdGU7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/validate.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"d120ea846b05\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyIvaG9tZS9sZmcvR2l0L01hZHRyaXBzL3NyYy9hcHAvZ2xvYmFscy5jc3MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJkMTIwZWE4NDZiMDVcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/contexts/NostrContext.tsx":
/*!*******************************************!*\
  !*** ./src/lib/contexts/NostrContext.tsx ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NostrProvider: () => (/* binding */ NostrProvider),\n/* harmony export */   PREDEFINED_PROFILES: () => (/* binding */ PREDEFINED_PROFILES),\n/* harmony export */   shortenNpub: () => (/* binding */ shortenNpub),\n/* harmony export */   useNostr: () => (/* binding */ useNostr)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @nostr-dev-kit/ndk */ \"(app-pages-browser)/./node_modules/@nostr-dev-kit/ndk/dist/index.mjs\");\n/* harmony import */ var nostr_tools__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! nostr-tools */ \"(app-pages-browser)/./node_modules/nostr-tools/lib/esm/index.js\");\n/* harmony import */ var _lib_nostr_nip47__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/nostr/nip47 */ \"(app-pages-browser)/./src/lib/nostr/nip47.ts\");\n/* harmony import */ var _lib_nostr_nip47_payments__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/nostr/nip47-payments */ \"(app-pages-browser)/./src/lib/nostr/nip47-payments.ts\");\n/* __next_internal_client_entry_do_not_use__ shortenNpub,PREDEFINED_PROFILES,NostrProvider,useNostr auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n\n// Utility function to shorten npub for display\nconst shortenNpub = (npub)=>{\n    if (!npub) return '';\n    return \"\".concat(npub.substring(0, 8), \"...\").concat(npub.substring(npub.length - 4));\n};\n// List of predefined profiles for view only mode\nconst PREDEFINED_PROFILES = [\n    {\n        // MadTrips official profile\n        pubkey: '9a0a16254ff0dd29bbe45aeea9b8d80c0b9537d879a93f2589bbacedc4db166e',\n        npub: 'npub14jrvanj69ulfxc92pqsunvv220xhwtn6pukpmgpqzg6xl6wmaflqnx6nvs',\n        name: 'MadTrips_Official',\n        displayName: 'MadTrips (Official)',\n        picture: '/assets/logo.png'\n    }\n];\n// Create the context\nconst NostrContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n// Provider component\nconst NostrProvider = (param)=>{\n    let { children } = param;\n    _s();\n    const [ndk, setNdk] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loginMethod, setLoginMethod] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [viewOnlyProfile, setViewOnlyProfile] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [nip47Client, setNip47Client] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [paymentClient, setPaymentClient] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [canMakePayments, setCanMakePayments] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Initialize NDK on component mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"NostrProvider.useEffect\": ()=>{\n            const initializeNDK = {\n                \"NostrProvider.useEffect.initializeNDK\": async ()=>{\n                    try {\n                        // Check if window is defined (only in browser)\n                        if (true) {\n                            // Create a new NDK instance without a signer initially\n                            const ndk = new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                                explicitRelayUrls: [\n                                    'wss://relay.damus.io',\n                                    'wss://relay.nostr.band',\n                                    'wss://nos.lol',\n                                    'wss://relay.current.fyi',\n                                    'wss://relay.snort.social'\n                                ]\n                            });\n                            // Connect to relays\n                            await ndk.connect();\n                            setNdk(ndk);\n                            console.log('NDK initialized without signer');\n                            setLoading(false);\n                        }\n                    } catch (e) {\n                        console.error('Failed to initialize NDK:', e);\n                        setError(e);\n                        setLoading(false);\n                    }\n                }\n            }[\"NostrProvider.useEffect.initializeNDK\"];\n            initializeNDK();\n        }\n    }[\"NostrProvider.useEffect\"], []);\n    // Login function that handles different methods\n    const login = async (method, options)=>{\n        if (!ndk) {\n            throw new Error('NDK not initialized');\n        }\n        setLoading(true);\n        setError(null);\n        try {\n            switch(method){\n                case 'nip07':\n                    {\n                        // Browser extension login (NIP-07)\n                        if ( false || !window.nostr) {\n                            throw new Error('No NIP-07 compatible browser extension found');\n                        }\n                        // Create a signer that uses the window.nostr API (extension)\n                        ndk.signer = new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKNip07Signer();\n                        // Get the user's public key\n                        const publicKey = await ndk.signer.user();\n                        if (!publicKey) {\n                            throw new Error('Failed to get public key from extension');\n                        }\n                        // Create an NDKUser from the public key\n                        const user = ndk.getUser({\n                            npub: publicKey.npub\n                        });\n                        // Fetch the user's profile\n                        await user.fetchProfile();\n                        setUser(user);\n                        setLoginMethod('nip07');\n                        setViewOnlyProfile(null);\n                        console.log('NIP-07 login successful:', user.npub);\n                        setCanMakePayments(false); // NIP-07 can't make payments by default\n                        break;\n                    }\n                case 'nip47':\n                    {\n                        // Remote signer login (NIP-47)\n                        if (!options || !options.target) {\n                            throw new Error('NIP-47 connection requires a target URL');\n                        }\n                        console.log('NIP-47 login requested to:', options.target);\n                        // For future implementation, we've created a NIP-47 client in @/lib/nostr/nip47.ts\n                        // but are providing a simplified implementation here for now\n                        try {\n                            // For demo purposes, we'll create a read-only profile from the target\n                            let npub = options.target;\n                            // If the target is a nostrconnect:// URL, extract the npub\n                            if (npub.startsWith('nostrconnect://')) {\n                                const url = new URL(npub);\n                                npub = url.pathname.substring(1); // Remove leading slash\n                                if (npub.startsWith('npub1')) {\n                                // Use as is\n                                } else {\n                                    // Convert hex to npub if needed\n                                    npub = nostr_tools__WEBPACK_IMPORTED_MODULE_5__.nip19.npubEncode(npub);\n                                }\n                            } else if (!npub.startsWith('npub1')) {\n                                // If it's a hex key, convert to npub\n                                npub = nostr_tools__WEBPACK_IMPORTED_MODULE_5__.nip19.npubEncode(npub);\n                            }\n                            // Create an NDKUser from the pubkey\n                            const user = ndk.getUser({\n                                npub\n                            });\n                            // Create NIP-47 client\n                            const client = new _lib_nostr_nip47__WEBPACK_IMPORTED_MODULE_3__.NIP47Client(options.target);\n                            // Connect to the remote signer\n                            await client.connect();\n                            // Get the public key\n                            const remotePubkey = await client.getPublicKey();\n                            // Create the payment client\n                            const payments = new _lib_nostr_nip47_payments__WEBPACK_IMPORTED_MODULE_4__.NIP47PaymentClient(client);\n                            // Check if payments are supported\n                            const paymentStatus = await payments.checkPaymentCapability();\n                            // Store the clients for later use\n                            setNip47Client(client);\n                            setPaymentClient(payments);\n                            setCanMakePayments(paymentStatus.canPay);\n                            // Attempt to fetch profile data\n                            try {\n                                await user.fetchProfile();\n                            } catch (e) {\n                                console.warn('Could not fetch profile for remote signer:', e);\n                            }\n                            setUser(user);\n                            setLoginMethod('nip47');\n                            setViewOnlyProfile(null);\n                            console.log('NIP-47 login successful:', user.npub);\n                            console.log('Payment capability:', paymentStatus.canPay ? 'Enabled' : 'Disabled');\n                            if (!paymentStatus.canPay) {\n                                console.warn('Payment not available:', paymentStatus.reason);\n                            }\n                        } catch (error) {\n                            console.error('NIP-47 login error:', error);\n                            throw new Error(\"NIP-47 login failed: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n                        }\n                        break;\n                    }\n                case 'viewonly':\n                    {\n                        // View-only login with a predefined profile\n                        if (!options || !options.profile) {\n                            throw new Error('View-only login requires a profile');\n                        }\n                        const profile = options.profile;\n                        // Create an NDKUser from the public key\n                        const user = ndk.getUser({\n                            npub: profile.npub\n                        });\n                        // For view-only, we can still fetch their profile data\n                        try {\n                            await user.fetchProfile();\n                        } catch (e) {\n                            console.warn('Could not fetch profile for view-only user, using predefined data');\n                            // Use the predefined profile data\n                            user.profile = {\n                                name: profile.name,\n                                displayName: profile.displayName,\n                                image: profile.picture\n                            };\n                        }\n                        setUser(user);\n                        setLoginMethod('viewonly');\n                        setViewOnlyProfile(profile);\n                        console.log('View-only login successful:', profile.npub);\n                        setNip47Client(null);\n                        setPaymentClient(null);\n                        setCanMakePayments(false);\n                        break;\n                    }\n                default:\n                    throw new Error(\"Unsupported login method: \".concat(method));\n            }\n        } catch (e) {\n            console.error(\"Login error (\".concat(method, \"):\"), e);\n            setError(e);\n            throw e;\n        } finally{\n            setLoading(false);\n        }\n    };\n    // Enhanced logout function\n    const logout = ()=>{\n        console.log('NostrContext: Logout initiated');\n        // Clean up any active subscriptions or resources if needed\n        if (ndk) {\n            try {\n                // If we have a signer, we should reset it\n                if (ndk.signer) {\n                    console.log('Resetting NDK signer');\n                    ndk.signer = undefined;\n                }\n                console.log('User resources cleaned up');\n            } catch (error) {\n                console.error('Error during logout cleanup:', error);\n            }\n        }\n        // Clean up NIP-47 client if it exists\n        if (nip47Client) {\n            try {\n                nip47Client.disconnect();\n            } catch (e) {\n                console.error('Error disconnecting NIP-47 client:', e);\n            }\n            setNip47Client(null);\n        }\n        // Clean up payment client\n        setPaymentClient(null);\n        setCanMakePayments(false);\n        // Reset all state\n        setLoginMethod(null);\n        setViewOnlyProfile(null);\n        setUser(null);\n        setError(null);\n        setLoading(false);\n        console.log('NostrContext: Logout completed');\n    };\n    // Get a user's profile\n    const getUserProfile = async (npub)=>{\n        if (!ndk) {\n            throw new Error('NDK not initialized');\n        }\n        const user = ndk.getUser({\n            npub\n        });\n        await user.fetchProfile();\n        return user;\n    };\n    // Get users that a user follows\n    const getFollows = async (npub)=>{\n        if (!ndk) {\n            throw new Error('NDK not initialized');\n        }\n        const user = ndk.getUser({\n            npub\n        });\n        const follows = await user.follows();\n        return Array.from(follows);\n    };\n    // Pay a Lightning invoice\n    const payInvoice = async (invoice)=>{\n        if (!paymentClient) {\n            throw new Error('Payment client not initialized');\n        }\n        if (!canMakePayments) {\n            throw new Error('Payments not supported with current login method');\n        }\n        try {\n            const response = await paymentClient.payInvoice(invoice);\n            if (response.error) {\n                throw new Error(\"Payment failed: \".concat(response.error.message));\n            }\n            return response.result;\n        } catch (error) {\n            console.error('Payment failed:', error);\n            throw error;\n        }\n    };\n    // Provide the context value\n    const contextValue = {\n        ndk,\n        user,\n        loading,\n        error,\n        loginMethod,\n        viewOnlyProfile,\n        availableProfiles: PREDEFINED_PROFILES,\n        login,\n        logout,\n        getUserProfile,\n        getFollows,\n        shortenNpub,\n        payInvoice: canMakePayments ? payInvoice : undefined,\n        canMakePayments\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(NostrContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"/home/lfg/Git/Madtrips/src/lib/contexts/NostrContext.tsx\",\n        lineNumber: 377,\n        columnNumber: 5\n    }, undefined);\n};\n_s(NostrProvider, \"XXmHTZ3akXfpNIfxEerd+v4DDso=\");\n_c = NostrProvider;\n// Hook to use the Nostr context\nconst useNostr = ()=>{\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(NostrContext);\n    if (context === undefined) {\n        throw new Error('useNostr must be used within a NostrProvider');\n    }\n    return context;\n};\n_s1(useNostr, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"NostrProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/contexts/NostrContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/nostr/nip47-payments.ts":
/*!*****************************************!*\
  !*** ./src/lib/nostr/nip47-payments.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NIP47PaymentClient: () => (/* binding */ NIP47PaymentClient)\n/* harmony export */ });\nclass NIP47PaymentClient {\n    /**\n   * Create and send a payment request for a Lightning invoice\n   * @param invoice - The Lightning invoice to pay\n   * @returns The payment response\n   */ async payInvoice(invoice) {\n        try {\n            if (!invoice || !invoice.startsWith('ln')) {\n                throw new Error('Invalid Lightning invoice format');\n            }\n            console.log('Creating payment request for invoice:', invoice.substring(0, 15) + '...');\n            // Create the payment request\n            const request = {\n                method: 'pay_invoice',\n                params: {\n                    invoice\n                }\n            };\n            // Use the underlying NIP47Client to send the request\n            const response = await this.client.sendRequest(request.method, request.params);\n            // Return the formatted response\n            return {\n                result: response\n            };\n        } catch (error) {\n            console.error('Payment request failed:', error);\n            // Format error response\n            return {\n                error: {\n                    code: error instanceof Error && 'code' in error ? error.code : -1,\n                    message: error instanceof Error ? error.message : String(error)\n                }\n            };\n        }\n    }\n    /**\n   * Get a filter to listen for payment responses\n   * This generates a filter that can be used with NDK subscriptions\n   * @param requestId - Optional specific request ID to filter for\n   * @returns A Nostr filter object\n   */ getPaymentResponseFilter(requestId) {\n        const filter = {\n            kinds: [\n                24133\n            ],\n            '#p': [\n                this.client.getClientPubkey()\n            ]\n        };\n        if (requestId) {\n            filter['#e'] = [\n                requestId\n            ];\n        }\n        return filter;\n    }\n    /**\n   * Process a payment response event\n   * @param event - The Nostr event containing the payment response\n   * @returns The decoded payment response\n   */ async processPaymentResponse(event) {\n        try {\n            // Decrypt the content\n            const decryptedContent = await this.client.decryptFromRemote(event.content);\n            // Parse the response\n            const response = JSON.parse(decryptedContent);\n            return response;\n        } catch (error) {\n            console.error('Failed to process payment response:', error);\n            return {\n                error: {\n                    code: -1,\n                    message: 'Failed to process payment response'\n                }\n            };\n        }\n    }\n    /**\n   * Check payment status for the user\n   * This is a utility method to check if the user can make payments\n   * @returns A status object indicating payment capability\n   */ async checkPaymentCapability() {\n        try {\n            // Check if the client is connected\n            if (!this.client.isConnected()) {\n                return {\n                    canPay: false,\n                    reason: 'Not connected to remote signer'\n                };\n            }\n            // Check capabilities to see if pay_invoice is supported\n            const capabilities = await this.client.getCapabilities();\n            if (!capabilities.includes('pay_invoice')) {\n                return {\n                    canPay: false,\n                    reason: 'Remote signer does not support payments'\n                };\n            }\n            return {\n                canPay: true\n            };\n        } catch (error) {\n            console.error('Failed to check payment capability:', error);\n            return {\n                canPay: false,\n                reason: error instanceof Error ? error.message : 'Unknown error checking payment capability'\n            };\n        }\n    }\n    constructor(client){\n        this.client = client;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/nostr/nip47-payments.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/nostr/nip47.ts":
/*!********************************!*\
  !*** ./src/lib/nostr/nip47.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NIP47Client: () => (/* binding */ NIP47Client)\n/* harmony export */ });\n/* harmony import */ var nostr_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! nostr-tools */ \"(app-pages-browser)/./node_modules/nostr-tools/lib/esm/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n/**\n * NIP-47 Remote Signer Client Implementation\n * This provides a working implementation for connecting to Nostr Connect (NIP-47) signers\n */ \n\nclass NIP47Client {\n    /**\n   * Get the client's public key\n   */ getClientPubkey() {\n        return this.clientPubkey;\n    }\n    /**\n   * Get the remote signer's public key\n   */ getRemotePubkey() {\n        return this.remotePubkey;\n    }\n    /**\n   * Check if connected to the remote signer\n   */ isConnected() {\n        return this.connectionEstablished;\n    }\n    /**\n   * Generate a unique request ID\n   */ generateRequestId() {\n        return (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n    }\n    /**\n   * Encrypt a message for the remote signer\n   */ async encryptForRemote(content) {\n        try {\n            return await nostr_tools__WEBPACK_IMPORTED_MODULE_1__.nip04.encrypt(this.clientPrivkey, this.remotePubkey, content);\n        } catch (error) {\n            console.error('Failed to encrypt message:', error);\n            throw new Error('Encryption failed');\n        }\n    }\n    /**\n   * Decrypt a message from the remote signer\n   */ async decryptFromRemote(ciphertext) {\n        try {\n            return await nostr_tools__WEBPACK_IMPORTED_MODULE_1__.nip04.decrypt(this.clientPrivkey, this.remotePubkey, ciphertext);\n        } catch (error) {\n            console.error('Failed to decrypt message:', error);\n            throw new Error('Decryption failed');\n        }\n    }\n    /**\n   * Send a request to the remote signer\n   */ async sendRequest(method) {\n        let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        if (!this.connectionEstablished) {\n            throw new Error('Not connected to remote signer');\n        }\n        const requestId = this.generateRequestId();\n        const request = {\n            id: requestId,\n            method,\n            params\n        };\n        // Create a promise that will be resolved/rejected when the response is received\n        const responsePromise = new Promise((resolve, reject)=>{\n            this.pendingRequests.set(requestId, {\n                resolve,\n                reject\n            });\n            // Set a timeout for the request\n            setTimeout(()=>{\n                if (this.pendingRequests.has(requestId)) {\n                    this.pendingRequests.delete(requestId);\n                    reject(new Error(\"Request timeout after \".concat(this.timeout, \"ms\")));\n                }\n            }, this.timeout);\n        });\n        try {\n            // Encrypt the request\n            const encryptedContent = await this.encryptForRemote(JSON.stringify(request));\n            // In a real implementation, you would:\n            // 1. Create a Nostr event with the encrypted content\n            // 2. Publish it to the relays\n            console.log(\"Sending NIP-47 request: \".concat(method));\n            // For development/testing, we'll simulate a response\n            this.simulateResponseFromRemote(requestId, method, params);\n            // Wait for the response\n            return await responsePromise;\n        } catch (error) {\n            if (this.pendingRequests.has(requestId)) {\n                this.pendingRequests.delete(requestId);\n            }\n            throw error;\n        }\n    }\n    /**\n   * Process a response from the remote signer (for real implementation)\n   */ async processResponse(event) {\n        try {\n            // Decrypt the content\n            const decryptedContent = await this.decryptFromRemote(event.content);\n            // Parse the response\n            const response = JSON.parse(decryptedContent);\n            // Find the pending request\n            const pendingRequest = this.pendingRequests.get(response.id);\n            if (!pendingRequest) {\n                console.warn(\"Received response for unknown request ID: \".concat(response.id));\n                return;\n            }\n            // Remove from pending requests\n            this.pendingRequests.delete(response.id);\n            // Resolve or reject the promise\n            if (response.error) {\n                pendingRequest.reject(new Error(\"Remote error (\".concat(response.error.code, \"): \").concat(response.error.message)));\n            } else {\n                pendingRequest.resolve(response.result);\n            }\n        } catch (error) {\n            console.error('Failed to process response:', error);\n        }\n    }\n    /**\n   * Simulate a response from the remote signer (for development/testing)\n   * This is only used for testing and demonstration purposes\n   */ simulateResponseFromRemote(requestId, method, params) {\n        // In a real implementation, this would be removed and the actual response\n        // would come from the remote signer via relays\n        setTimeout(async ()=>{\n            const pendingRequest = this.pendingRequests.get(requestId);\n            if (!pendingRequest) return;\n            try {\n                let result;\n                switch(method){\n                    case 'get_public_key':\n                        result = this.remotePubkey;\n                        break;\n                    case 'sign_event':\n                        // Simulate signing by returning the event with a valid-looking signature\n                        // In a real implementation, this would be signed by the remote signer\n                        result = {\n                            ...params.event,\n                            sig: '00'.repeat(32)\n                        };\n                        break;\n                    case 'connect':\n                        result = {\n                            approved: true\n                        };\n                        break;\n                    case 'pay_invoice':\n                        // Simulate payment by returning a fake preimage\n                        result = {\n                            preimage: '00'.repeat(16)\n                        };\n                        break;\n                    default:\n                        throw new Error(\"Unsupported method: \".concat(method));\n                }\n                pendingRequest.resolve(result);\n            } catch (error) {\n                pendingRequest.reject(error);\n            } finally{\n                this.pendingRequests.delete(requestId);\n            }\n        }, 1000); // Simulate a 1-second delay\n    }\n    /**\n   * Connect to the remote signer\n   */ async connect() {\n        // For the basic implementation, we just validate the inputs\n        if (!this.remotePubkey) {\n            throw new Error('Remote pubkey is required');\n        }\n        // In a real implementation, we'd establish a connection via relays\n        console.log(\"Connecting to remote signer: \".concat(this.remotePubkey, \" via \").concat(this.relayUrl || 'default relays'));\n        try {\n            // Send a connect request (in a real implementation)\n            // await this.sendRequest('connect', {\n            //   name: 'MadTrips App',\n            //   url: 'https://madtrips.com'\n            // });\n            // For now, we'll just simulate a successful connection\n            await new Promise((resolve)=>setTimeout(resolve, 500));\n            this.connectionEstablished = true;\n            console.log('Connected to remote signer successfully');\n        } catch (error) {\n            console.error('Failed to connect to remote signer:', error);\n            throw error;\n        }\n    }\n    /**\n   * Get the public key from the remote signer\n   */ async getPublicKey() {\n        if (!this.connectionEstablished) {\n            throw new Error('Not connected to remote signer');\n        }\n        try {\n            // Send a get_public_key request\n            const result = await this.sendRequest('get_public_key');\n            return result;\n        } catch (error) {\n            console.error('Failed to get public key from remote signer:', error);\n            throw error;\n        }\n    }\n    /**\n   * Sign an event using the remote signer\n   */ async signEvent(event) {\n        if (!this.connectionEstablished) {\n            throw new Error('Not connected to remote signer');\n        }\n        try {\n            // Send a sign_event request\n            const result = await this.sendRequest('sign_event', {\n                event\n            });\n            return result;\n        } catch (error) {\n            console.error('Failed to sign event with remote signer:', error);\n            throw error;\n        }\n    }\n    /**\n   * Encrypt a message using NIP-04\n   */ async encrypt(pubkey, plaintext) {\n        if (!this.connectionEstablished) {\n            throw new Error('Not connected to remote signer');\n        }\n        try {\n            // Send an encrypt request\n            const result = await this.sendRequest('nip04_encrypt', {\n                pubkey,\n                plaintext\n            });\n            return result;\n        } catch (error) {\n            console.error('Failed to encrypt with remote signer:', error);\n            throw error;\n        }\n    }\n    /**\n   * Decrypt a message using NIP-04\n   */ async decrypt(pubkey, ciphertext) {\n        if (!this.connectionEstablished) {\n            throw new Error('Not connected to remote signer');\n        }\n        try {\n            // Send a decrypt request\n            const result = await this.sendRequest('nip04_decrypt', {\n                pubkey,\n                ciphertext\n            });\n            return result;\n        } catch (error) {\n            console.error('Failed to decrypt with remote signer:', error);\n            throw error;\n        }\n    }\n    /**\n   * Get information about the signer wallet\n   */ async getInfo() {\n        if (!this.connectionEstablished) {\n            throw new Error('Not connected to remote signer');\n        }\n        try {\n            // Send a get_info request\n            const result = await this.sendRequest('get_info');\n            return result;\n        } catch (error) {\n            console.error('Failed to get wallet info from remote signer:', error);\n            throw error;\n        }\n    }\n    /**\n   * Get the wallet balance\n   */ async getBalance() {\n        if (!this.connectionEstablished) {\n            throw new Error('Not connected to remote signer');\n        }\n        try {\n            // Send a get_balance request\n            const result = await this.sendRequest('get_balance');\n            return result;\n        } catch (error) {\n            console.error('Failed to get balance from remote signer:', error);\n            throw error;\n        }\n    }\n    /**\n   * Pay a Lightning invoice\n   * @param invoice BOLT11 Lightning invoice to pay\n   * @returns Payment result with preimage and payment hash\n   */ async payInvoice(invoice) {\n        if (!this.connectionEstablished) {\n            throw new Error('Not connected to remote signer');\n        }\n        try {\n            console.log('Sending payment request for invoice:', invoice.substring(0, 30) + '...');\n            // Send a pay_invoice request\n            const result = await this.sendRequest('pay_invoice', {\n                invoice\n            });\n            console.log('Payment successful:', result);\n            return result;\n        } catch (error) {\n            console.error('Payment failed:', error);\n            throw error;\n        }\n    }\n    /**\n   * Create a payment request event\n   * This method helps create a properly formatted payment request\n   * following the NIP-47 specification\n   */ async createPaymentRequestEvent(invoice) {\n        if (!this.connectionEstablished) {\n            throw new Error('Not connected to remote signer');\n        }\n        // Create the payment request\n        const requestId = this.generateRequestId();\n        const request = {\n            id: requestId,\n            method: 'pay_invoice',\n            params: {\n                invoice\n            }\n        };\n        // Encrypt the request content\n        const encryptedContent = await this.encryptForRemote(JSON.stringify(request));\n        // Create the Nostr event\n        const event = {\n            kind: 24133,\n            created_at: Math.floor(Date.now() / 1000),\n            tags: [\n                [\n                    'p',\n                    this.remotePubkey\n                ]\n            ],\n            content: encryptedContent,\n            pubkey: this.clientPubkey\n        };\n        // The event should be signed, but in this case we'll return it unsigned\n        // as it would typically be signed by the application\n        return event;\n    }\n    /**\n   * Process a payment response event\n   * This method decrypts and processes a payment response from the remote signer\n   */ async processPaymentResponse(event) {\n        try {\n            // Decrypt the content\n            const decryptedContent = await this.decryptFromRemote(event.content);\n            // Parse the response\n            const response = JSON.parse(decryptedContent);\n            return response;\n        } catch (error) {\n            console.error('Failed to process payment response:', error);\n            throw new Error('Invalid payment response');\n        }\n    }\n    /**\n   * Get additional capabilities from the remote signer\n   */ async getCapabilities() {\n        if (!this.connectionEstablished) {\n            throw new Error('Not connected to remote signer');\n        }\n        try {\n            // Send a get_capabilities request\n            const result = await this.sendRequest('get_capabilities');\n            return result || [];\n        } catch (error) {\n            console.error('Failed to get capabilities from remote signer:', error);\n            // Not fatal, just return an empty array\n            return [];\n        }\n    }\n    /**\n   * Disconnect from the remote signer\n   */ disconnect() {\n        this.connectionEstablished = false;\n        // Clear any pending requests\n        for (const [id, { reject }] of this.pendingRequests){\n            reject(new Error('Disconnected from remote signer'));\n            this.pendingRequests.delete(id);\n        }\n        console.log('Disconnected from remote signer');\n    }\n    /**\n   * Create a new NIP-47 client\n   * @param remoteUrl - The remote signer URL (nostrconnect:// URL or similar)\n   * @param relayUrl - Optional relay URL for communication\n   */ constructor(remoteUrl, relayUrl){\n        this.connectionEstablished = false;\n        this.pendingRequests = new Map();\n        this.timeout = 30000 // 30 seconds timeout for requests\n        ;\n        // Parse the remote URL\n        if (remoteUrl.startsWith('nostrconnect://')) {\n            try {\n                const url = new URL(remoteUrl);\n                this.remotePubkey = url.pathname.substring(1); // Remove leading slash\n                // Get relay URL from params if not provided\n                if (!relayUrl && url.searchParams.has('relay')) {\n                    this.relayUrl = url.searchParams.get('relay') || undefined;\n                } else {\n                    this.relayUrl = relayUrl;\n                }\n            } catch (e) {\n                throw new Error('Invalid NIP-47 remote URL format');\n            }\n        } else if (remoteUrl.startsWith('npub1')) {\n            // Assume it's a direct npub\n            try {\n                const decoded = nostr_tools__WEBPACK_IMPORTED_MODULE_1__.nip19.decode(remoteUrl);\n                if (decoded.type !== 'npub') {\n                    throw new Error('Invalid NIP-47 remote pubkey format');\n                }\n                this.remotePubkey = decoded.data;\n                this.relayUrl = relayUrl;\n            } catch (e) {\n                throw new Error('Invalid NIP-47 remote pubkey format');\n            }\n        } else {\n            // Assume it's a hex pubkey\n            this.remotePubkey = remoteUrl;\n            this.relayUrl = relayUrl;\n        }\n        // Generate a keypair for this client if needed\n        this.clientPrivkey = (0,nostr_tools__WEBPACK_IMPORTED_MODULE_1__.generateSecretKey)();\n        this.clientPubkey = (0,nostr_tools__WEBPACK_IMPORTED_MODULE_1__.getPublicKey)(this.clientPrivkey);\n        this.remoteUrl = remoteUrl;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/nostr/nip47.ts\n"));

/***/ })

});
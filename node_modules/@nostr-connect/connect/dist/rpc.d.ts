/// <reference types="node" />
import EventEmitter from 'events';
import { Event, Relay, Sub } from 'nostr-tools';
export interface NostrRPCRequest {
    id: string;
    method: string;
    params: any[];
}
export interface NostrRPCResponse {
    id: string;
    result: any;
    error: any;
}
export declare class NostrRPC {
    relay: string;
    self: {
        pubkey: string;
        secret: string;
    };
    event: Event | undefined;
    [key: string]: any;
    events: EventEmitter;
    constructor(opts: {
        relay?: string;
        secretKey: string;
    });
    call({ target, request: { id, method, params }, }: {
        target: string;
        request: {
            id?: string;
            method: string;
            params?: any[];
        };
    }, opts?: {
        skipResponse?: boolean;
        timeout?: number;
    }): Promise<any>;
    listen(): Promise<Sub>;
    private handleRequest;
}
export declare function now(): number;
export declare function randomID(): string;
export declare function prepareRequest(id: string, method: string, params: any[]): string;
export declare function prepareResponse(id: string, result: any, error: any): string;
export declare function prepareEvent(secretKey: string, pubkey: string, content: string): Promise<Event>;
export declare function isValidRequest(payload: any): boolean;
export declare function isValidResponse(payload: any): boolean;
export declare function connectToRelay(realayURL: string): Promise<Relay>;
export declare function broadcastToRelay(relay: Relay, event: Event, skipSeen?: boolean): Promise<void>;

import EventEmitter from 'events';
import { relayInit, getPublicKey, getEventHash, signEvent, validateEvent, verifySignature, nip04 } from 'nostr-tools';

function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return exports;
  };
  var exports = {},
    Op = Object.prototype,
    hasOwn = Op.hasOwnProperty,
    defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    },
    $Symbol = "function" == typeof Symbol ? Symbol : {},
    iteratorSymbol = $Symbol.iterator || "@@iterator",
    asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
    toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
      generator = Object.create(protoGenerator.prototype),
      context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg,
          value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function (method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function (method, arg) {
      if ("executing" === state) throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method) throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg;;) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
          if ("suspendedStart" === state) throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method,
      method = delegate.iterator[methodName];
    if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            return next.value = undefined, next.done = !0, next;
          };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (val) {
    var object = Object(val),
      keys = [];
    for (var key in object) keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
          record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
            hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

var NostrRPC = /*#__PURE__*/function () {
  function NostrRPC(opts) {
    // events
    this.events = new EventEmitter();
    this.relay = opts.relay || 'wss://nostr.vulpem.com';
    this.self = {
      pubkey: getPublicKey(opts.secretKey),
      secret: opts.secretKey
    };
  }
  var _proto = NostrRPC.prototype;
  _proto.call = /*#__PURE__*/function () {
    var _call = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref, opts) {
      var _this = this;
      var target, _ref$request, _ref$request$id, id, method, _ref$request$params, params, relay, request, event;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            target = _ref.target, _ref$request = _ref.request, _ref$request$id = _ref$request.id, id = _ref$request$id === void 0 ? /*#__PURE__*/randomID() : _ref$request$id, method = _ref$request.method, _ref$request$params = _ref$request.params, params = _ref$request$params === void 0 ? [] : _ref$request$params;
            _context3.next = 3;
            return connectToRelay(this.relay);
          case 3:
            relay = _context3.sent;
            // prepare request to be sent
            request = prepareRequest(id, method, params);
            _context3.next = 7;
            return prepareEvent(this.self.secret, target, request);
          case 7:
            event = _context3.sent;
            return _context3.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {
                var sub;
                return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                  while (1) switch (_context2.prev = _context2.next) {
                    case 0:
                      sub = relay.sub([{
                        kinds: [24133],
                        authors: [target],
                        '#p': [_this.self.pubkey],
                        limit: 1
                      }]);
                      _context2.next = 3;
                      return broadcastToRelay(relay, event, true);
                    case 3:
                      // skip waiting for response from remote
                      if (opts && opts.skipResponse === true) resolve();
                      sub.on('event', /*#__PURE__*/function () {
                        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {
                          var payload, plaintext;
                          return _regeneratorRuntime().wrap(function _callee$(_context) {
                            while (1) switch (_context.prev = _context.next) {
                              case 0:
                                _context.prev = 0;
                                _context.next = 3;
                                return nip04.decrypt(_this.self.secret, event.pubkey, event.content);
                              case 3:
                                plaintext = _context.sent;
                                if (plaintext) {
                                  _context.next = 6;
                                  break;
                                }
                                throw new Error('failed to decrypt event');
                              case 6:
                                payload = JSON.parse(plaintext);
                                _context.next = 12;
                                break;
                              case 9:
                                _context.prev = 9;
                                _context.t0 = _context["catch"](0);
                                return _context.abrupt("return");
                              case 12:
                                if (isValidResponse(payload)) {
                                  _context.next = 14;
                                  break;
                                }
                                return _context.abrupt("return");
                              case 14:
                                if (!(payload.id !== id)) {
                                  _context.next = 16;
                                  break;
                                }
                                return _context.abrupt("return");
                              case 16:
                                // if the response is an error, reject the promise
                                if (payload.error) {
                                  reject(payload.error);
                                }
                                // if the response is a result, resolve the promise
                                if (payload.result) {
                                  resolve(payload.result);
                                }
                              case 18:
                              case "end":
                                return _context.stop();
                            }
                          }, _callee, null, [[0, 9]]);
                        }));
                        return function (_x5) {
                          return _ref3.apply(this, arguments);
                        };
                      }());
                    case 5:
                    case "end":
                      return _context2.stop();
                  }
                }, _callee2);
              }));
              return function (_x3, _x4) {
                return _ref2.apply(this, arguments);
              };
            }()));
          case 9:
          case "end":
            return _context3.stop();
        }
      }, _callee3, this);
    }));
    function call(_x, _x2) {
      return _call.apply(this, arguments);
    }
    return call;
  }();
  _proto.listen = /*#__PURE__*/function () {
    var _listen = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
      var _this2 = this;
      var relay, sub;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return connectToRelay(this.relay);
          case 2:
            relay = _context5.sent;
            sub = relay.sub([{
              kinds: [24133],
              '#p': [this.self.pubkey],
              since: now()
            }]);
            sub.on('event', /*#__PURE__*/function () {
              var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(event) {
                var payload, plaintext, response, body, responseEvent;
                return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                  while (1) switch (_context4.prev = _context4.next) {
                    case 0:
                      _context4.prev = 0;
                      _context4.next = 3;
                      return nip04.decrypt(_this2.self.secret, event.pubkey, event.content);
                    case 3:
                      plaintext = _context4.sent;
                      if (plaintext) {
                        _context4.next = 6;
                        break;
                      }
                      throw new Error('failed to decrypt event');
                    case 6:
                      payload = JSON.parse(plaintext);
                      _context4.next = 12;
                      break;
                    case 9:
                      _context4.prev = 9;
                      _context4.t0 = _context4["catch"](0);
                      return _context4.abrupt("return");
                    case 12:
                      if (isValidRequest(payload)) {
                        _context4.next = 14;
                        break;
                      }
                      return _context4.abrupt("return");
                    case 14:
                      _context4.next = 17;
                      return _this2.handleRequest(payload, event);
                    case 17:
                      response = _context4.sent;
                      body = prepareResponse(response.id, response.result, response.error);
                      _context4.next = 21;
                      return prepareEvent(_this2.self.secret, event.pubkey, body);
                    case 21:
                      responseEvent = _context4.sent;
                      // send response via relay
                      relay.publish(responseEvent);
                    case 23:
                    case "end":
                      return _context4.stop();
                  }
                }, _callee4, null, [[0, 9]]);
              }));
              return function (_x6) {
                return _ref4.apply(this, arguments);
              };
            }());
            return _context5.abrupt("return", sub);
          case 6:
          case "end":
            return _context5.stop();
        }
      }, _callee5, this);
    }));
    function listen() {
      return _listen.apply(this, arguments);
    }
    return listen;
  }();
  _proto.handleRequest = /*#__PURE__*/function () {
    var _handleRequest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(request, event) {
      var id, method, params, result, error;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            id = request.id, method = request.method, params = request.params;
            result = null;
            error = null;
            _context6.prev = 3;
            this.event = event;
            _context6.next = 7;
            return this[method].apply(this, params);
          case 7:
            result = _context6.sent;
            this.event = undefined;
            _context6.next = 14;
            break;
          case 11:
            _context6.prev = 11;
            _context6.t0 = _context6["catch"](3);
            if (_context6.t0 instanceof Error) {
              error = _context6.t0.message;
            } else {
              error = 'unknown error';
            }
          case 14:
            return _context6.abrupt("return", {
              id: id,
              result: result,
              error: error
            });
          case 15:
          case "end":
            return _context6.stop();
        }
      }, _callee6, this, [[3, 11]]);
    }));
    function handleRequest(_x7, _x8) {
      return _handleRequest.apply(this, arguments);
    }
    return handleRequest;
  }();
  return NostrRPC;
}();
function now() {
  return Math.floor(Date.now() / 1000);
}
function randomID() {
  return Math.random().toString().slice(2);
}
function prepareRequest(id, method, params) {
  return JSON.stringify({
    id: id,
    method: method,
    params: params
  });
}
function prepareResponse(id, result, error) {
  return JSON.stringify({
    id: id,
    result: result,
    error: error
  });
}
function prepareEvent(_x9, _x10, _x11) {
  return _prepareEvent.apply(this, arguments);
}
function _prepareEvent() {
  _prepareEvent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(secretKey, pubkey, content) {
    var cipherText, event, id, sig, signedEvent, ok, veryOk;
    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          _context7.next = 2;
          return nip04.encrypt(secretKey, pubkey, content);
        case 2:
          cipherText = _context7.sent;
          event = {
            kind: 24133,
            created_at: now(),
            pubkey: getPublicKey(secretKey),
            tags: [['p', pubkey]],
            content: cipherText,
            id: '',
            sig: ''
          };
          id = getEventHash(event);
          sig = signEvent(event, secretKey);
          signedEvent = _extends({}, event, {
            id: id,
            sig: sig
          });
          ok = validateEvent(signedEvent);
          veryOk = verifySignature(signedEvent);
          if (!(!ok || !veryOk)) {
            _context7.next = 11;
            break;
          }
          throw new Error('Event is not valid');
        case 11:
          return _context7.abrupt("return", signedEvent);
        case 12:
        case "end":
          return _context7.stop();
      }
    }, _callee7);
  }));
  return _prepareEvent.apply(this, arguments);
}
function isValidRequest(payload) {
  if (!payload) return false;
  var keys = Object.keys(payload);
  if (!keys.includes('id') || !keys.includes('method') || !keys.includes('params')) return false;
  return true;
}
function isValidResponse(payload) {
  if (!payload) return false;
  var keys = Object.keys(payload);
  if (!keys.includes('id') || !keys.includes('result') || !keys.includes('error')) return false;
  return true;
}
function connectToRelay(_x12) {
  return _connectToRelay.apply(this, arguments);
}
function _connectToRelay() {
  _connectToRelay = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(realayURL) {
    var relay;
    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
      while (1) switch (_context8.prev = _context8.next) {
        case 0:
          relay = relayInit(realayURL);
          _context8.next = 3;
          return relay.connect();
        case 3:
          _context8.next = 5;
          return new Promise(function (resolve, reject) {
            relay.on('connect', function () {
              resolve();
            });
            relay.on('error', function () {
              reject(new Error("not possible to connect to " + relay.url));
            });
          });
        case 5:
          return _context8.abrupt("return", relay);
        case 6:
        case "end":
          return _context8.stop();
      }
    }, _callee8);
  }));
  return _connectToRelay.apply(this, arguments);
}
function broadcastToRelay(_x13, _x14, _x15) {
  return _broadcastToRelay.apply(this, arguments);
}
function _broadcastToRelay() {
  _broadcastToRelay = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(relay, event, skipSeen) {
    return _regeneratorRuntime().wrap(function _callee9$(_context9) {
      while (1) switch (_context9.prev = _context9.next) {
        case 0:
          if (skipSeen === void 0) {
            skipSeen = false;
          }
          _context9.next = 3;
          return new Promise(function (resolve, reject) {
            relay.on('error', function () {
              reject(new Error("failed to connect to " + relay.url));
            });
            var pub = relay.publish(event);
            if (skipSeen) resolve();
            pub.on('failed', function (reason) {
              reject(reason);
            });
            pub.on('ok', function () {
              resolve();
            });
          });
        case 3:
          return _context9.abrupt("return", _context9.sent);
        case 4:
        case "end":
          return _context9.stop();
      }
    }, _callee9);
  }));
  return _broadcastToRelay.apply(this, arguments);
}

var _TimeRangeToUnix;
var TimeRanges;
(function (TimeRanges) {
  TimeRanges["FIVE_MINS"] = "5mins";
  TimeRanges["ONE_HR"] = "1hour";
  TimeRanges["ONE_DAY"] = "1day";
  TimeRanges["ONE_WEEK"] = "1week";
  TimeRanges["ONE_MONTH"] = "1month";
  TimeRanges["ONE_YEAR"] = "1year";
})(TimeRanges || (TimeRanges = {}));
var TimeRangeToUnix = (_TimeRangeToUnix = {}, _TimeRangeToUnix[TimeRanges.FIVE_MINS] = /*#__PURE__*/Math.round( /*#__PURE__*/Date.now() / 1000) + 60 * 5, _TimeRangeToUnix[TimeRanges.ONE_HR] = /*#__PURE__*/Math.round( /*#__PURE__*/Date.now() / 1000) + 60 * 60, _TimeRangeToUnix[TimeRanges.ONE_DAY] = /*#__PURE__*/Math.round( /*#__PURE__*/Date.now() / 1000) + 60 * 60 * 24, _TimeRangeToUnix[TimeRanges.ONE_WEEK] = /*#__PURE__*/Math.round( /*#__PURE__*/Date.now() / 1000) + 60 * 60 * 24 * 7, _TimeRangeToUnix[TimeRanges.ONE_MONTH] = /*#__PURE__*/Math.round( /*#__PURE__*/Date.now() / 1000) + 60 * 60 * 24 * 30, _TimeRangeToUnix[TimeRanges.ONE_YEAR] = /*#__PURE__*/Math.round( /*#__PURE__*/Date.now() / 1000) + 60 * 60 * 24 * 365, _TimeRangeToUnix);
var ConnectURI = /*#__PURE__*/function () {
  function ConnectURI(_ref) {
    var target = _ref.target,
      metadata = _ref.metadata,
      relay = _ref.relay;
    this.target = target;
    this.metadata = metadata;
    this.relay = relay;
  }
  ConnectURI.fromURI = function fromURI(uri) {
    var url = new URL(uri);
    var target = url.hostname || url.pathname.substring(2);
    if (!target) throw new Error('Invalid connect URI: missing target');
    var relay = url.searchParams.get('relay');
    if (!relay) {
      throw new Error('Invalid connect URI: missing relay');
    }
    var metadata = url.searchParams.get('metadata');
    if (!metadata) {
      throw new Error('Invalid connect URI: missing metadata');
    }
    /* eslint-disable @typescript-eslint/no-unused-vars */
    try {
      var md = JSON.parse(metadata);
      return new ConnectURI({
        target: target,
        metadata: md,
        relay: relay
      });
    } catch (ignore) {
      throw new Error('Invalid connect URI: metadata is not valid JSON');
    }
  };
  var _proto = ConnectURI.prototype;
  _proto.toString = function toString() {
    return "nostrconnect://" + this.target + "?metadata=" + encodeURIComponent(JSON.stringify(this.metadata)) + "&relay=" + encodeURIComponent(this.relay);
  };
  _proto.approve = /*#__PURE__*/function () {
    var _approve = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(secretKey) {
      var rpc;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            rpc = new NostrRPC({
              relay: this.relay,
              secretKey: secretKey
            });
            _context.next = 3;
            return rpc.call({
              target: this.target,
              request: {
                method: 'connect',
                params: [getPublicKey(secretKey)]
              }
            }, {
              skipResponse: true
            });
          case 3:
          case "end":
            return _context.stop();
        }
      }, _callee, this);
    }));
    function approve(_x) {
      return _approve.apply(this, arguments);
    }
    return approve;
  }();
  _proto.reject = /*#__PURE__*/function () {
    var _reject = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(secretKey) {
      var rpc;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            rpc = new NostrRPC({
              relay: this.relay,
              secretKey: secretKey
            });
            _context2.next = 3;
            return rpc.call({
              target: this.target,
              request: {
                method: 'disconnect',
                params: []
              }
            }, {
              skipResponse: true
            });
          case 3:
          case "end":
            return _context2.stop();
        }
      }, _callee2, this);
    }));
    function reject(_x2) {
      return _reject.apply(this, arguments);
    }
    return reject;
  }();
  return ConnectURI;
}();
var Connect = /*#__PURE__*/function () {
  function Connect(_ref2) {
    var target = _ref2.target,
      relay = _ref2.relay,
      secretKey = _ref2.secretKey;
    this.events = new EventEmitter();
    this.nip04 = {
      encrypt: function () {
        var _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_pubkey, _plaintext) {
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                throw new Error('Not implemented');
              case 1:
              case "end":
                return _context3.stop();
            }
          }, _callee3);
        }));
        function encrypt(_x3, _x4) {
          return _encrypt.apply(this, arguments);
        }
        return encrypt;
      }(),
      decrypt: function () {
        var _decrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(_pubkey, _ciphertext) {
          return _regeneratorRuntime().wrap(function _callee4$(_context4) {
            while (1) switch (_context4.prev = _context4.next) {
              case 0:
                throw new Error('Not implemented');
              case 1:
              case "end":
                return _context4.stop();
            }
          }, _callee4);
        }));
        function decrypt(_x5, _x6) {
          return _decrypt.apply(this, arguments);
        }
        return decrypt;
      }()
    };
    this.rpc = new NostrRPC({
      relay: relay,
      secretKey: secretKey
    });
    if (target) {
      this.target = target;
    }
  }
  var _proto2 = Connect.prototype;
  _proto2.init = /*#__PURE__*/function () {
    var _init = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
      var _this = this;
      var sub;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return this.rpc.listen();
          case 2:
            sub = _context6.sent;
            sub.on('event', /*#__PURE__*/function () {
              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(event) {
                var payload, plaintext, _payload$params, pubkey;
                return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                  while (1) switch (_context5.prev = _context5.next) {
                    case 0:
                      _context5.prev = 0;
                      _context5.next = 3;
                      return nip04.decrypt(_this.rpc.self.secret, event.pubkey, event.content);
                    case 3:
                      plaintext = _context5.sent;
                      if (plaintext) {
                        _context5.next = 6;
                        break;
                      }
                      throw new Error('failed to decrypt event');
                    case 6:
                      payload = JSON.parse(plaintext);
                      _context5.next = 12;
                      break;
                    case 9:
                      _context5.prev = 9;
                      _context5.t0 = _context5["catch"](0);
                      return _context5.abrupt("return");
                    case 12:
                      if (isValidRequest(payload)) {
                        _context5.next = 14;
                        break;
                      }
                      return _context5.abrupt("return");
                    case 14:
                      _context5.t1 = payload.method;
                      _context5.next = _context5.t1 === 'connect' ? 17 : _context5.t1 === 'disconnect' ? 23 : 26;
                      break;
                    case 17:
                      if (!(!payload.params || payload.params.length !== 1)) {
                        _context5.next = 19;
                        break;
                      }
                      throw new Error('connect: missing pubkey');
                    case 19:
                      _payload$params = payload.params, pubkey = _payload$params[0];
                      _this.target = pubkey;
                      _this.events.emit('connect', pubkey);
                      return _context5.abrupt("break", 26);
                    case 23:
                      _this.target = undefined;
                      _this.events.emit('disconnect');
                      return _context5.abrupt("break", 26);
                    case 26:
                    case "end":
                      return _context5.stop();
                  }
                }, _callee5, null, [[0, 9]]);
              }));
              return function (_x7) {
                return _ref3.apply(this, arguments);
              };
            }());
          case 4:
          case "end":
            return _context6.stop();
        }
      }, _callee6, this);
    }));
    function init() {
      return _init.apply(this, arguments);
    }
    return init;
  }();
  _proto2.on = function on(evt, cb) {
    this.events.on(evt, cb);
  };
  _proto2.off = function off(evt, cb) {
    this.events.off(evt, cb);
  };
  _proto2.disconnect = /*#__PURE__*/function () {
    var _disconnect = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            if (this.target) {
              _context7.next = 2;
              break;
            }
            throw new Error('Not connected');
          case 2:
            // notify the UI that we are disconnecting
            this.events.emit('disconnect');
            _context7.prev = 3;
            _context7.next = 6;
            return this.rpc.call({
              target: this.target,
              request: {
                method: 'disconnect',
                params: []
              }
            }, {
              skipResponse: true
            });
          case 6:
            _context7.next = 11;
            break;
          case 8:
            _context7.prev = 8;
            _context7.t0 = _context7["catch"](3);
            throw new Error('Failed to disconnect');
          case 11:
            this.target = undefined;
          case 12:
          case "end":
            return _context7.stop();
        }
      }, _callee7, this, [[3, 8]]);
    }));
    function disconnect() {
      return _disconnect.apply(this, arguments);
    }
    return disconnect;
  }();
  _proto2.getPublicKey = /*#__PURE__*/function () {
    var _getPublicKey = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
      var response;
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            if (this.target) {
              _context8.next = 2;
              break;
            }
            throw new Error('Not connected');
          case 2:
            _context8.next = 4;
            return this.rpc.call({
              target: this.target,
              request: {
                method: 'get_public_key',
                params: []
              }
            });
          case 4:
            response = _context8.sent;
            return _context8.abrupt("return", response);
          case 6:
          case "end":
            return _context8.stop();
        }
      }, _callee8, this);
    }));
    function getPublicKey() {
      return _getPublicKey.apply(this, arguments);
    }
    return getPublicKey;
  }();
  _proto2.signEvent = /*#__PURE__*/function () {
    var _signEvent = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(event) {
      var eventWithSig;
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            if (this.target) {
              _context9.next = 2;
              break;
            }
            throw new Error('Not connected');
          case 2:
            _context9.next = 4;
            return this.rpc.call({
              target: this.target,
              request: {
                method: 'sign_event',
                params: [event]
              }
            });
          case 4:
            eventWithSig = _context9.sent;
            return _context9.abrupt("return", eventWithSig);
          case 6:
          case "end":
            return _context9.stop();
        }
      }, _callee9, this);
    }));
    function signEvent(_x8) {
      return _signEvent.apply(this, arguments);
    }
    return signEvent;
  }();
  _proto2.describe = /*#__PURE__*/function () {
    var _describe = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
      var response;
      return _regeneratorRuntime().wrap(function _callee10$(_context10) {
        while (1) switch (_context10.prev = _context10.next) {
          case 0:
            if (this.target) {
              _context10.next = 2;
              break;
            }
            throw new Error('Not connected');
          case 2:
            _context10.next = 4;
            return this.rpc.call({
              target: this.target,
              request: {
                method: 'describe',
                params: []
              }
            });
          case 4:
            response = _context10.sent;
            return _context10.abrupt("return", response);
          case 6:
          case "end":
            return _context10.stop();
        }
      }, _callee10, this);
    }));
    function describe() {
      return _describe.apply(this, arguments);
    }
    return describe;
  }();
  _proto2.delegate = /*#__PURE__*/function () {
    var _delegate = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(delegatee, conditions) {
      var delegation;
      return _regeneratorRuntime().wrap(function _callee11$(_context11) {
        while (1) switch (_context11.prev = _context11.next) {
          case 0:
            if (delegatee === void 0) {
              delegatee = this.rpc.self.pubkey;
            }
            if (this.target) {
              _context11.next = 3;
              break;
            }
            throw new Error('Not connected');
          case 3:
            if (!(conditions.until && typeof conditions.until !== 'number')) {
              _context11.next = 7;
              break;
            }
            if (Object.keys(TimeRangeToUnix).includes(conditions.until)) {
              _context11.next = 6;
              break;
            }
            throw new Error('conditions.until must be either a number or a valid TimeRange');
          case 6:
            conditions.until = TimeRangeToUnix[conditions.until];
          case 7:
            if (!(conditions.since && typeof conditions.since !== 'number')) {
              _context11.next = 11;
              break;
            }
            if (Object.keys(TimeRangeToUnix).includes(conditions.since)) {
              _context11.next = 10;
              break;
            }
            throw new Error('conditions.since must be either a number or a valid TimeRange');
          case 10:
            conditions.since = TimeRangeToUnix[conditions.since];
          case 11:
            _context11.next = 13;
            return this.rpc.call({
              target: this.target,
              request: {
                method: 'delegate',
                params: [delegatee, conditions]
              }
            });
          case 13:
            delegation = _context11.sent;
            return _context11.abrupt("return", delegation);
          case 15:
          case "end":
            return _context11.stop();
        }
      }, _callee11, this);
    }));
    function delegate(_x9, _x10) {
      return _delegate.apply(this, arguments);
    }
    return delegate;
  }();
  _proto2.getRelays = /*#__PURE__*/function () {
    var _getRelays = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
      return _regeneratorRuntime().wrap(function _callee12$(_context12) {
        while (1) switch (_context12.prev = _context12.next) {
          case 0:
            throw new Error('Not implemented');
          case 1:
          case "end":
            return _context12.stop();
        }
      }, _callee12);
    }));
    function getRelays() {
      return _getRelays.apply(this, arguments);
    }
    return getRelays;
  }();
  return Connect;
}();

var NostrSigner = /*#__PURE__*/function (_NostrRPC) {
  _inheritsLoose(NostrSigner, _NostrRPC);
  function NostrSigner() {
    return _NostrRPC.apply(this, arguments) || this;
  }
  var _proto = NostrSigner.prototype;
  _proto.disconnect = /*#__PURE__*/function () {
    var _disconnect = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            this.events.emit('disconnect');
            return _context.abrupt("return", null);
          case 2:
          case "end":
            return _context.stop();
        }
      }, _callee, this);
    }));
    function disconnect() {
      return _disconnect.apply(this, arguments);
    }
    return disconnect;
  }();
  _proto.isConnected = function isConnected() {
    throw new Error('Method not implemented yet.');
  };
  return NostrSigner;
}(NostrRPC);

export { Connect, ConnectURI, NostrRPC, NostrSigner, TimeRangeToUnix, TimeRanges, broadcastToRelay, connectToRelay, isValidRequest, isValidResponse, now, prepareEvent, prepareRequest, prepareResponse, randomID };
//# sourceMappingURL=connect.esm.js.map

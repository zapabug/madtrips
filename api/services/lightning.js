import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

// LNBits API configuration
const LNBITS_URL = process.env.LNBITS_URL || 'https://legend.lnbits.com';
const INVOICE_READ_KEY = process.env.LNBITS_INVOICE_READ_KEY;
const ADMIN_KEY = process.env.LNBITS_ADMIN_KEY;
const WALLET_ID = process.env.LNBITS_WALLET_ID;

// Check if LNBits is configured
const isConfigured = () => {
  return INVOICE_READ_KEY && ADMIN_KEY && WALLET_ID;
};

// Create a Lightning invoice
export const createInvoice = async (amount, memo) => {
  if (!isConfigured()) {
    console.warn('LNBits is not configured. Using fake invoice.');
    return createFakeInvoice(amount, memo);
  }

  try {
    const response = await axios.post(
      `${LNBITS_URL}/api/v1/payments`,
      {
        out: false,
        amount: amount,
        memo: memo,
        unit: 'sat'
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'X-Api-Key': ADMIN_KEY
        }
      }
    );

    return {
      id: response.data.payment_hash,
      invoice: response.data.payment_request,
      // LNBits doesn't return a QR code directly, we'll generate one separately
    };
  } catch (error) {
    console.error('Error creating invoice with LNBits:', error.response?.data || error.message);
    // Fallback to fake invoice if LNBits fails
    return createFakeInvoice(amount, memo);
  }
};

// Check if a payment has been received
export const checkPayment = async (paymentHash) => {
  if (!isConfigured()) {
    console.warn('LNBits is not configured. Simulating successful payment.');
    return { paid: true };
  }

  try {
    const response = await axios.get(
      `${LNBITS_URL}/api/v1/payments/${paymentHash}`,
      {
        headers: {
          'X-Api-Key': INVOICE_READ_KEY
        }
      }
    );

    return {
      paid: response.data.paid,
      preimage: response.data.preimage || null,
      details: response.data
    };
  } catch (error) {
    console.error('Error checking payment with LNBits:', error.response?.data || error.message);
    // For demo purposes, we'll assume the payment failed if there's an error
    return { paid: false, error: error.message };
  }
};

// Create a fake invoice for testing without LNBits
const createFakeInvoice = (amount, memo) => {
  const paymentHash = Math.random().toString(36).substring(2, 15);
  const fakeInvoice = `lnbcrt${amount}n1p38q70app5wkr9zr7heaxzrz0mfj8420fcn4ytp7j3h2fhk652jssmkscnypjhvsdqqcqzzsxqyz5vqsp5mw6nxs4c44ze2hsw40f3v54ztwe360hg76twx4dvu0etlkp8s6fq9qyyssqy2a5jk28hc3cfu6z056snfs7avjssywpnvwpgudj2ucl7l8n5c8dhjs4jf2u3049mkaeregutx87tzn54v88gft5pqeu5df2lg8fkkcpvp0yqf`;

  return {
    id: paymentHash,
    invoice: fakeInvoice,
    // QR code will be generated by the API route
  };
}; 